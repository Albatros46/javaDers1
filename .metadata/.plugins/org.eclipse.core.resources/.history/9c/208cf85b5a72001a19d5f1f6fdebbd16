
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;


public class Main {
    /* 
    Trehad lar da Runnable interface den run metodu kullanmistik. 
    fakat run metodu ile thread islemi bitirdikten sonra herhangi bir deger donemiyoruz. 
    Bunun alternatifi olarak Callable ve Future interface kullanacagiz.
    */
    public static void main(String[] args){
        //Thread havuzunda en fazla kac tane thread calisabilir onu belirledik.
        ExecutorService threadHavuz=Executors.newFixedThreadPool(1);
        
        threadHavuz.submit(new Runnable(){
            @Override
            public void run() {
                Random random=new Random();
                System.out.println("Thread Calisiyor.");
                int sure=random.nextInt(1000)+2000;
                
                try {
                    Thread.sleep(sure);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.out.println("Thread Cikiyor....");
            }
        });
        threadHavuz.shutdown();
    }
}
