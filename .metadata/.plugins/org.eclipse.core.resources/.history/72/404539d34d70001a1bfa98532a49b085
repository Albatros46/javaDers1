
import java.util.logging.Level;
import java.util.logging.Logger;

/*
Buyuk projelerde birden fazla 100 tane belki daha fazla Thread larimiz bulunabilir.
Butun threadlarin ayný anda calismasi da bellekte gereksiz kullanim harcayacagindan 
ExecutorService ile biz bu thread lara calisma sartlari/siralari veya thread havuzlari olusturacagiz.
*/
public class Main {
    public static void main(String[] args){
       
        Thread t1=new Thread(new Worker("Servet",1));
        Thread t2=new Thread(new Worker("Ahmet",2));
        Thread t3=new Thread(new Worker("Akif",3));
        Thread t4=new Thread(new Worker("Oguz",4));
        Thread t5=new Thread(new Worker("Rukiye",5));
        //ilk olarak t1 ve t1 calissin sonra t3 ve t4 en son t5 calissin istiyoruz.
        
        System.out.println("Calisanlar mesaiye basladi...");
       
        t1.start(); t2.start(); //t1 ve t2 basladi
        
        try {//sonra t1 ve t2 bitene kadar main treadimiz bloklanmis oldu.
            t1.join(); t2.join(); 
        } catch (InterruptedException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        t3.start(); t4.start(); //t1 ve t2 basladi
        
        try {//sonra t3 ve t4 bitene kadar main treadimiz bloklanmis oldu.
            t3.join(); t4.join(); 
        } catch (InterruptedException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        t5.start();//t5 basladi
        try {//t5 bitene kadar main thread bloklandi.
            t5.join();
        } catch (InterruptedException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        System.out.println("Butun isler tamamlandi.");
    }
}
