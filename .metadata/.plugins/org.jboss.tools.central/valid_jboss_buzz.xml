<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Red Hat XML language server becomes LemMinX, bringing new release and updated VS Code XML extension</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/__M7AW5kpqo/" /><category term="Java" /><category term="Programming Languages" /><category term="VS Code" /><category term="Eclipse" /><category term="language server" /><category term="LemMinX" /><category term="schema validation" /><category term="xml" /><author><name>David Kwon</name></author><id>https://developers.redhat.com/blog/?p=699007</id><updated>2020-03-27T07:00:40Z</updated><published>2020-03-27T07:00:40Z</published><content type="html">&lt;p&gt;A new era has begun for &lt;a href="https://developers.redhat.com/blog/2018/12/04/xml-language-server-vscode-extension/" target="_blank" rel="noopener noreferrer"&gt;Red Hat’s XML language server&lt;/a&gt;, which was migrated to the Eclipse Foundation under a new project name: &lt;a href="https://projects.eclipse.org/projects/technology.lemminx" target="_blank" rel="noopener noreferrer"&gt;Eclipse LemMinX&lt;/a&gt; (a reference to the &lt;a href="https://en.wikipedia.org/wiki/Lemmings_(video_game)" target="_blank" rel="noopener noreferrer"&gt;Lemmings video game&lt;/a&gt;). The Eclipse LemMinX project is arguably the most feature-rich XML language server available. Its migration opens more doors for future development and utilization. In addition, shortly after its migration, the Eclipse LemMinX project and Red Hat also released updates: Eclipse LemMinX version 0.11.1 and the &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-xml"&gt;Red Hat VS Code XML extension&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Eclipse LemMinX version 0.11.1&lt;/h2&gt; &lt;p&gt;Eclipse LemMinX version 0.11.1 mainly focuses on bug fixes that are &lt;a href="https://github.com/eclipse/lemminx/blob/master/CHANGELOG.md" target="_blank" rel="noopener noreferrer"&gt;outlined in the changelog here&lt;/a&gt;. For some history, Eclipse LemMinX started as an open source project created by &lt;a href="https://twitter.com/angelozerr" target="_blank" rel="noopener noreferrer"&gt;Angelo ZERR&lt;/a&gt; in mid-2018. Angelo’s XML language server implementation was well ahead of the game in terms of features and code infrastructure. As Red Hat’s interest in an XML language server continued to grow, Red Hat joined forces with Angelo (who later officially joined Red Hat as a senior software engineer) to create the most feature-rich and easy-to-use XML language server possible.&lt;/p&gt; &lt;p&gt;Thanks to the XML language server’s popularity and functionality, clients like Eclipse (with Wild Web Developer), VS Code (with XML Language Support by Red Hat), and Vim/Neovim (with &lt;code&gt;coc-xml&lt;/code&gt;) started consuming the XML language server. In addition, all LSP features (completion, validation, quick fix, etc.) provided by the XML language server are easily extensible. This helped motivate other projects to extend the LSP features, instead of implementing them themselves from scratch.&lt;/p&gt; &lt;p&gt;For example, there are extensions specific for Maven and Liferay. The Maven extension extends the completion feature to manage advanced dependency completion, and the Liferay extension extends the hover feature to fit specific use cases. We hope that the contribution to the Eclipse Foundation facilitates easier consumption from related projects and attracts new contributors beyond people from Red Hat.&lt;/p&gt; &lt;h2&gt;Red Hat VS Code XML extension&lt;/h2&gt; &lt;p&gt;In addition, we released the &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-xml" target="_blank" rel="noopener noreferrer"&gt;Red Hat VS Code XML extension&lt;/a&gt; (which, of course, consumes the Eclipse LemMinX XML language server to provide language features). This extension provides an excellent all-in-one package for editing XML, XSD, and DTD files in VS Code, but what makes this extension stand out is the support for XSD and DTD schema validation for XML files.&lt;/p&gt; &lt;p&gt;This new release also focussed on bug fixes, which are &lt;a href="https://github.com/redhat-developer/vscode-xml/blob/master/CHANGELOG.md" target="_blank" rel="noopener noreferrer"&gt;outlined in the changelog here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F27%2Fred-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension%2F&amp;#38;linkname=Red%20Hat%20XML%20language%20server%20becomes%20LemMinX%2C%20bringing%20new%20release%20and%20updated%20VS%20Code%20XML%20extension" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F27%2Fred-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension%2F&amp;#38;linkname=Red%20Hat%20XML%20language%20server%20becomes%20LemMinX%2C%20bringing%20new%20release%20and%20updated%20VS%20Code%20XML%20extension" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F27%2Fred-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension%2F&amp;#38;linkname=Red%20Hat%20XML%20language%20server%20becomes%20LemMinX%2C%20bringing%20new%20release%20and%20updated%20VS%20Code%20XML%20extension" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F27%2Fred-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension%2F&amp;#38;linkname=Red%20Hat%20XML%20language%20server%20becomes%20LemMinX%2C%20bringing%20new%20release%20and%20updated%20VS%20Code%20XML%20extension" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F27%2Fred-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension%2F&amp;#38;linkname=Red%20Hat%20XML%20language%20server%20becomes%20LemMinX%2C%20bringing%20new%20release%20and%20updated%20VS%20Code%20XML%20extension" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F27%2Fred-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension%2F&amp;#38;linkname=Red%20Hat%20XML%20language%20server%20becomes%20LemMinX%2C%20bringing%20new%20release%20and%20updated%20VS%20Code%20XML%20extension" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F27%2Fred-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension%2F&amp;#38;linkname=Red%20Hat%20XML%20language%20server%20becomes%20LemMinX%2C%20bringing%20new%20release%20and%20updated%20VS%20Code%20XML%20extension" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F27%2Fred-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension%2F&amp;#038;title=Red%20Hat%20XML%20language%20server%20becomes%20LemMinX%2C%20bringing%20new%20release%20and%20updated%20VS%20Code%20XML%20extension" data-a2a-url="https://developers.redhat.com/blog/2020/03/27/red-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension/" data-a2a-title="Red Hat XML language server becomes LemMinX, bringing new release and updated VS Code XML extension"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/27/red-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension/"&gt;Red Hat XML language server becomes LemMinX, bringing new release and updated VS Code XML extension&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/__M7AW5kpqo" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;A new era has begun for Red Hat’s XML language server, which was migrated to the Eclipse Foundation under a new project name: Eclipse LemMinX (a reference to the Lemmings video game). The Eclipse LemMinX project is arguably the most feature-rich XML language server available. Its migration opens more doors for future development and utilization. [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/27/red-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension/"&gt;Red Hat XML language server becomes LemMinX, bringing new release and updated VS Code XML extension&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">699007</post-id><dc:creator>David Kwon</dc:creator><dc:date>2020-03-27T07:00:40Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/03/27/red-hat-xml-language-server-becomes-lemminx-bringing-new-release-and-updated-vs-code-xml-extension/</feedburner:origLink></entry><entry><title>Static analysis in GCC 10</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/TDcC4qlLEHs/" /><category term="C" /><category term="Open source" /><category term="Security" /><category term="compiler" /><category term="double-free" /><category term="Fedora" /><category term="gcc" /><category term="GNU Compiler Collection" /><author><name>David Malcolm</name></author><id>https://developers.redhat.com/blog/?p=689087</id><updated>2020-03-26T07:00:33Z</updated><published>2020-03-26T07:00:33Z</published><content type="html">&lt;p&gt;I work at Red Hat on &lt;a href="https://gcc.gnu.org/"&gt;GCC, the GNU Compiler Collection&lt;/a&gt;. For the next major release of GCC, &lt;a href="https://gcc.gnu.org/gcc-10/changes.html" target="_blank" rel="noopener noreferrer"&gt;GCC 10&lt;/a&gt;, I&amp;#8217;ve been implementing a new &lt;code&gt;-fanalyzer&lt;/code&gt; option: A static analysis pass to identify various problems at compile-time, rather than at runtime.&lt;/p&gt; &lt;p&gt;My thinking here is that it&amp;#8217;s best to catch problems as early as possible as the code is written, using the compiler the code is written in as part of the compile-edit-debug cycle, rather than having static analysis as an extra tool &amp;#8220;on the side&amp;#8221; (perhaps proprietary). Hence, it seems worthwhile to have a static analyzer built into the compiler that can see exactly the same code as the compiler sees—because it &lt;i&gt;is&lt;/i&gt; the compiler.&lt;/p&gt; &lt;p&gt;&lt;span id="more-689087"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;This issue is, of course, a huge problem to tackle. For this release, I&amp;#8217;ve focused on the kinds of problems seen in C code—and, in particular &lt;a href="https://cwe.mitre.org/data/definitions/415.html" target="_blank" rel="noopener noreferrer"&gt;double-free bugs&lt;/a&gt;—but with a view toward creating a framework that we can expand on in subsequent releases (when we can add more checks and support languages other than C).&lt;/p&gt; &lt;p&gt;My hope is that the analyzer provides a decent amount of extra checking while not being too expensive. I&amp;#8217;ve aimed for &lt;code&gt;-fanalyzer&lt;/code&gt; to &amp;#8220;merely&amp;#8221; double the compile time as a reasonable trade-off for the extra checks. I haven&amp;#8217;t succeeded yet, as you&amp;#8217;ll see below, but I&amp;#8217;m working on it.&lt;/p&gt; &lt;p&gt;Right now the code is in GCC&amp;#8217;s master branch for GCC 10 and can be tried out on &lt;a href="http://godbolt.org/" target="_blank" rel="noopener noreferrer"&gt;Compiler Explorer, aka godbolt.org&lt;/a&gt;. It works well for small and medium-sized examples, but there are bugs that mean it&amp;#8217;s not ready for production use. I&amp;#8217;m working hard on fixing things in the hope that the feature will be meaningfully usable for C code by the time of GCC 10&amp;#8217;s release (likely in April).&lt;/p&gt; &lt;h2&gt;Diagnostic paths&lt;/h2&gt; &lt;p&gt;Here&amp;#8217;s the simplest possible example of a double-free bug:&lt;/p&gt; &lt;div class="highlight" style="background: #f8f8f8;"&gt; &lt;pre style="line-height: 125%;"&gt;&lt;span style="color: #bc7a00;"&gt;#include&lt;/span&gt; &lt;span style="color: #408080; font-style: italic;"&gt;&amp;#60;stdlib.h&amp;#62;&lt;/span&gt; &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;test&lt;/span&gt;(&lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #666666;"&gt;*&lt;/span&gt;ptr) { free(ptr); free(ptr); } &lt;/pre&gt; &lt;/div&gt; &lt;p&gt;GCC 10 with &lt;code&gt;-fanalyzer&lt;/code&gt; reports it as follows:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ gcc -c -fanalyzer double-free-1.c &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;double-free-1.c:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;test&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;double-free-1.c:6:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;warning: &lt;/span&gt;&lt;/span&gt;double-‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;free&lt;/span&gt;’ of ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;ptr&lt;/span&gt;’ [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;CWE-415&lt;/span&gt;&lt;/span&gt;] [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;-Wanalyzer-double-free&lt;/span&gt;&lt;/span&gt;] 6 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;free(ptr)&lt;/span&gt;&lt;/span&gt;; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;^~~~~~~~~&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;test&lt;/span&gt;’: events 1-2 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 5 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;free(ptr)&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(1)&lt;/span&gt;&lt;/span&gt; first ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;free&lt;/span&gt;’ here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 6 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;free(ptr)&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(2)&lt;/span&gt;&lt;/span&gt; second ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;free&lt;/span&gt;’ here; first ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;free&lt;/span&gt;’ was at &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(1)&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;This response shows that GCC has learned some new tricks; first, the ability for diagnostics to have &lt;a href="https://cwe.mitre.org/" target="_blank" rel="noopener noreferrer"&gt;Common Weakness Enumeration (CWE) identifiers&lt;/a&gt;. In this example, the double-free diagnostic is tagged with &lt;a href="https://cwe.mitre.org/data/definitions/415.html"&gt;CWE-415&lt;/a&gt;. This tag hopefully makes the output more clear, improves precision, and gives you something simple to type into search engines. So far, only diagnostics from &lt;code&gt;-fanalyzer&lt;/code&gt; have been tagged with CWE weakness identifiers.&lt;/p&gt; &lt;p&gt;If you&amp;#8217;re using GCC 10 with a suitable terminal (e.g. recent gnome-terminal), the CWE identifier is a clickable hyperlink, taking you to a &lt;a href="https://cwe.mitre.org/data/definitions/415.html" target="_blank" rel="noopener noreferrer"&gt;description of the problem&lt;/a&gt;. Speaking of hyperlinks, for many releases, when GCC emits a warning it prints the option controlling that warning. As of GCC 10, that option text is now a clickable hyperlink (again, assuming a &lt;a href="https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda" target="_blank" rel="noopener noreferrer"&gt;sufficiently capable terminal&lt;/a&gt;), which should take you to the documentation for that option (for any warning, not just the ones relating to the analyzer).&lt;/p&gt; &lt;p&gt;Second, GCC diagnostics can now have a chain of events associated with them, describing a path through the code that triggers the problem. Given the lack of control flow in the above example, it has just two events, but you can see how the second event refers to the first event in its description.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s a more involved example. Can you see the issue in the following code? (Hint: It&amp;#8217;s not a double-free this time):&lt;/p&gt; &lt;div class="highlight" style="background: #f8f8f8;"&gt; &lt;pre style="line-height: 125%;"&gt;&lt;span style="color: #bc7a00;"&gt;#include&lt;/span&gt; &lt;span style="color: #408080; font-style: italic;"&gt;&amp;#60;setjmp.h&amp;#62;&lt;/span&gt; &lt;span style="color: #bc7a00;"&gt;#include&lt;/span&gt; &lt;span style="color: #408080; font-style: italic;"&gt;&amp;#60;stdlib.h&amp;#62;&lt;/span&gt; &lt;span style="color: #008000; font-weight: bold;"&gt;static&lt;/span&gt; &lt;span style="color: #b00040;"&gt;jmp_buf&lt;/span&gt; env; &lt;span style="color: #008000; font-weight: bold;"&gt;static&lt;/span&gt; &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;inner&lt;/span&gt;(&lt;span style="color: #b00040;"&gt;void&lt;/span&gt;) { longjmp(env, &lt;span style="color: #666666;"&gt;1&lt;/span&gt;); } &lt;span style="color: #008000; font-weight: bold;"&gt;static&lt;/span&gt; &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;middle&lt;/span&gt;(&lt;span style="color: #b00040;"&gt;void&lt;/span&gt;) { &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #666666;"&gt;*&lt;/span&gt;ptr &lt;span style="color: #666666;"&gt;=&lt;/span&gt; malloc(&lt;span style="color: #666666;"&gt;1024&lt;/span&gt;); inner(); free(ptr); } &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;outer&lt;/span&gt;(&lt;span style="color: #b00040;"&gt;void&lt;/span&gt;) { &lt;span style="color: #b00040;"&gt;int&lt;/span&gt; i; i &lt;span style="color: #666666;"&gt;=&lt;/span&gt; setjmp(env); &lt;span style="color: #008000; font-weight: bold;"&gt;if&lt;/span&gt; (i &lt;span style="color: #666666;"&gt;==&lt;/span&gt; &lt;span style="color: #666666;"&gt;0&lt;/span&gt;) middle(); } &lt;/pre&gt; &lt;/div&gt; &lt;p&gt;Here&amp;#8217;s what GCC&amp;#8217;s &lt;code&gt;-fanalyzer&lt;/code&gt; reports, which shows the interprocedural control flow via ASCII art:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ gcc -c -fanalyzer longjmp-demo.c &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;inner&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:8:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;warning: &lt;/span&gt;&lt;/span&gt;leak of ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;ptr&lt;/span&gt;’ [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;CWE-401&lt;/span&gt;&lt;/span&gt;] [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;-Wanalyzer-malloc-leak&lt;/span&gt;&lt;/span&gt;] 8 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;longjmp(env, 1)&lt;/span&gt;&lt;/span&gt;; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;^~~~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;outer&lt;/span&gt;’: event 1 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 18 | void &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;outer&lt;/span&gt;&lt;/span&gt;(void) &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(1)&lt;/span&gt;&lt;/span&gt; entry to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;outer&lt;/span&gt;’ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;outer&lt;/span&gt;’: event 2 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 22 | i = &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;setjmp&lt;/span&gt;&lt;/span&gt;(env); &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(2)&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;setjmp&lt;/span&gt;’ called here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;outer&lt;/span&gt;’: events 3-5 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 23 | if &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(&lt;/span&gt;&lt;/span&gt;i == 0) &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(3)&lt;/span&gt;&lt;/span&gt; following ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;true&lt;/span&gt;’ branch (when ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;i == 0&lt;/span&gt;’)... &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 24 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;middle()&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(4)&lt;/span&gt;&lt;/span&gt; ...to here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(5)&lt;/span&gt;&lt;/span&gt; calling ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;middle&lt;/span&gt;’ from ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;outer&lt;/span&gt;’ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;+--&amp;#62; &lt;/span&gt;&lt;/span&gt;‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;middle&lt;/span&gt;’: events 6-8 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 11 | static void &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;middle&lt;/span&gt;&lt;/span&gt;(void) &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(6)&lt;/span&gt;&lt;/span&gt; entry to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;middle&lt;/span&gt;’ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 12 | { &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 13 | void *ptr = &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;malloc(1024)&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(7)&lt;/span&gt;&lt;/span&gt; allocated here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 14 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;inner()&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(8)&lt;/span&gt;&lt;/span&gt; calling ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;inner&lt;/span&gt;’ from ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;middle&lt;/span&gt;’ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;+--&amp;#62; &lt;/span&gt;&lt;/span&gt;‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;inner&lt;/span&gt;’: events 9-11 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 6 | static void &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;inner&lt;/span&gt;&lt;/span&gt;(void) &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(9)&lt;/span&gt;&lt;/span&gt; entry to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;inner&lt;/span&gt;’ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 7 | { &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 8 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;longjmp(env, 1)&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(10)&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;ptr&lt;/span&gt;’ leaks here; was allocated at &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(7)&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(11)&lt;/span&gt;&lt;/span&gt; rewinding from ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp&lt;/span&gt;’ in ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;inner&lt;/span&gt;’... &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;&amp;#60;-------------+&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;outer&lt;/span&gt;’: event 12 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 22 | i = &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;setjmp&lt;/span&gt;&lt;/span&gt;(env); &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(12)&lt;/span&gt;&lt;/span&gt; ...to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;setjmp&lt;/span&gt;’ in ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;outer&lt;/span&gt;’ (saved at &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(2)&lt;/span&gt;&lt;/span&gt;) &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;The above is rather verbose, though perhaps it needs to be to convey what&amp;#8217;s going on, given the use of &lt;code&gt;setjmp&lt;/code&gt; and &lt;code&gt;longjmp&lt;/code&gt;. I hope the description is reasonably clear: There&amp;#8217;s a memory leak that occurs when the call to &lt;code&gt;longjmp&lt;/code&gt; unwinds the stack back to &lt;code&gt;outer&lt;/code&gt; past the cleanup point in &lt;code&gt;middle&lt;/code&gt;, without invoking the cleanup.&lt;/p&gt; &lt;p&gt;If you don&amp;#8217;t like the ASCII art above, you can view the events as separate &amp;#8220;note&amp;#8221; diagnostics with &lt;code&gt;-fdiagnostics-path-format=separate-events&lt;/code&gt;:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ gcc -c -fanalyzer -fdiagnostics-path-format=separate-events longjmp-demo.c &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;inner&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:8:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;warning: &lt;/span&gt;&lt;/span&gt;leak of ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;ptr&lt;/span&gt;’ [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;CWE-401&lt;/span&gt;&lt;/span&gt;] [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;-Wanalyzer-malloc-leak&lt;/span&gt;&lt;/span&gt;] 8 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;longjmp(env, 1)&lt;/span&gt;&lt;/span&gt;; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;^~~~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:18:6:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (1)&lt;/span&gt;&lt;/span&gt; entry to ‘outer’ 18 | void &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;outer&lt;/span&gt;&lt;/span&gt;(void) | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~&lt;/span&gt;&lt;/span&gt; In file included from &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:1&lt;/span&gt;: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:22:7:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (2)&lt;/span&gt;&lt;/span&gt; ‘setjmp’ called here 22 | i = &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;setjmp&lt;/span&gt;&lt;/span&gt;(env); | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:23:6:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (3)&lt;/span&gt;&lt;/span&gt; following ‘true’ branch (when ‘i == 0’)... 23 | if &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(&lt;/span&gt;&lt;/span&gt;i == 0) | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:24:5:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (4)&lt;/span&gt;&lt;/span&gt; ...to here 24 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;middle()&lt;/span&gt;&lt;/span&gt;; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:24:5:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (5)&lt;/span&gt;&lt;/span&gt; calling ‘middle’ from ‘outer’ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:11:13:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (6)&lt;/span&gt;&lt;/span&gt; entry to ‘middle’ 11 | static void &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;middle&lt;/span&gt;&lt;/span&gt;(void) | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:13:15:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (7)&lt;/span&gt;&lt;/span&gt; allocated here 13 | void *ptr = &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;malloc(1024)&lt;/span&gt;&lt;/span&gt;; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:14:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (8)&lt;/span&gt;&lt;/span&gt; calling ‘inner’ from ‘middle’ 14 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;inner()&lt;/span&gt;&lt;/span&gt;; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:6:13:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (9)&lt;/span&gt;&lt;/span&gt; entry to ‘inner’ 6 | static void &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;inner&lt;/span&gt;&lt;/span&gt;(void) | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:8:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (10)&lt;/span&gt;&lt;/span&gt; ‘ptr’ leaks here; was allocated at (7) 8 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;longjmp(env, 1)&lt;/span&gt;&lt;/span&gt;; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:8:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (11)&lt;/span&gt;&lt;/span&gt; rewinding from ‘longjmp’ in ‘inner’... In file included from &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:1&lt;/span&gt;: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;longjmp-demo.c:22:7:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: (12)&lt;/span&gt;&lt;/span&gt; ...to ‘setjmp’ in ‘outer’ (saved at (2)) 22 | i = &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;setjmp&lt;/span&gt;&lt;/span&gt;(env); | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;or turn them off altogether with &lt;code&gt;-fdiagnostics-path-format=none&lt;/code&gt;. There&amp;#8217;s also a JSON output format.&lt;/p&gt; &lt;p&gt;All of the new diagnostics have a &lt;code&gt;-Wanalyzer-SOMETHING&lt;/code&gt; name: We&amp;#8217;ve already seen &lt;code&gt;-Wanalyzer-double-free&lt;/code&gt; and &lt;code&gt;-Wanalyzer-malloc-leak&lt;/code&gt; above. These diagnostics are all enabled when &lt;code&gt;-fanalyzer&lt;/code&gt; is enabled, but they can be selectively disabled via the &lt;code&gt;-Wno-analyzer-SOMETHING&lt;/code&gt; variants (e.g., via pragmas).&lt;/p&gt; &lt;h2&gt;What are the new warnings?&lt;/h2&gt; &lt;p&gt;As well as double-free detection, there are checks for &lt;code&gt;malloc&lt;/code&gt; and &lt;code&gt;fopen&lt;/code&gt; leaks:&lt;/p&gt; &lt;div class="highlight" style="background: #f8f8f8;"&gt; &lt;pre style="line-height: 125%;"&gt;&lt;span style="color: #bc7a00;"&gt;#include&lt;/span&gt; &lt;span style="color: #408080; font-style: italic;"&gt;&amp;#60;stdio.h&amp;#62;&lt;/span&gt; &lt;span style="color: #bc7a00;"&gt;#include&lt;/span&gt; &lt;span style="color: #408080; font-style: italic;"&gt;&amp;#60;stdlib.h&amp;#62;&lt;/span&gt; &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;test&lt;/span&gt;(&lt;span style="color: #008000; font-weight: bold;"&gt;const&lt;/span&gt; &lt;span style="color: #b00040;"&gt;char&lt;/span&gt; &lt;span style="color: #666666;"&gt;*&lt;/span&gt;filename) { &lt;span style="color: #b00040;"&gt;FILE&lt;/span&gt; &lt;span style="color: #666666;"&gt;*&lt;/span&gt;f &lt;span style="color: #666666;"&gt;=&lt;/span&gt; fopen(filename, &lt;span style="color: #ba2121;"&gt;"r"&lt;/span&gt;); &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #666666;"&gt;*&lt;/span&gt;p &lt;span style="color: #666666;"&gt;=&lt;/span&gt; malloc(&lt;span style="color: #666666;"&gt;1024&lt;/span&gt;); &lt;span style="color: #408080; font-style: italic;"&gt;/* do stuff */&lt;/span&gt; } &lt;/pre&gt; &lt;/div&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ gcc -c -fanalyzer leak.c &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;leak.c:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;test&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;leak.c:9:1:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;warning: &lt;/span&gt;&lt;/span&gt;leak of ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;p&lt;/span&gt;’ [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;CWE-401&lt;/span&gt;&lt;/span&gt;] [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;-Wanalyzer-malloc-leak&lt;/span&gt;&lt;/span&gt;] 9 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;}&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;^&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;test&lt;/span&gt;’: events 1-2 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 7 | void *p = &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;malloc(1024)&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(1)&lt;/span&gt;&lt;/span&gt; allocated here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 8 | /* do stuff */ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 9 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(2)&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;p&lt;/span&gt;’ leaks here; was allocated at &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(1)&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;leak.c:9:1:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;warning: &lt;/span&gt;&lt;/span&gt;leak of FILE ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;f&lt;/span&gt;’ [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;CWE-775&lt;/span&gt;&lt;/span&gt;] [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;-Wanalyzer-file-leak&lt;/span&gt;&lt;/span&gt;] 9 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;}&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;^&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;test&lt;/span&gt;’: events 1-2 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 6 | FILE *f = &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;fopen(filename, "r")&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~~~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(1)&lt;/span&gt;&lt;/span&gt; opened here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt;...... &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 9 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(2)&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;f&lt;/span&gt;’ leaks here; was opened at &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(1)&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;For using memory after it has been freed:&lt;/p&gt; &lt;div class="highlight" style="background: #f8f8f8;"&gt; &lt;pre style="line-height: 125%;"&gt;&lt;span style="color: #bc7a00;"&gt;#include&lt;/span&gt; &lt;span style="color: #408080; font-style: italic;"&gt;&amp;#60;stdlib.h&amp;#62;&lt;/span&gt; &lt;span style="color: #008000; font-weight: bold;"&gt;struct&lt;/span&gt; link { &lt;span style="color: #008000; font-weight: bold;"&gt;struct&lt;/span&gt; link &lt;span style="color: #666666;"&gt;*&lt;/span&gt;next; }; &lt;span style="color: #b00040;"&gt;int&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;free_a_list_badly&lt;/span&gt;(&lt;span style="color: #008000; font-weight: bold;"&gt;struct&lt;/span&gt; link &lt;span style="color: #666666;"&gt;*&lt;/span&gt;n) { &lt;span style="color: #008000; font-weight: bold;"&gt;while&lt;/span&gt; (n) { free(n); n &lt;span style="color: #666666;"&gt;=&lt;/span&gt; n&lt;span style="color: #666666;"&gt;-&amp;#62;&lt;/span&gt;next; } } &lt;/pre&gt; &lt;/div&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ gcc -c -fanalyzer use-after-free.c &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;use-after-free.c:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;free_a_list_badly&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;use-after-free.c:9:7:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;warning: &lt;/span&gt;&lt;/span&gt;use after ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;free&lt;/span&gt;’ of ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;n&lt;/span&gt;’ [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;CWE-416&lt;/span&gt;&lt;/span&gt;] [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;-Wanalyzer-use-after-free&lt;/span&gt;&lt;/span&gt;] 9 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;n = n-&amp;#62;next&lt;/span&gt;&lt;/span&gt;; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;~~^~~~~~~~~&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;free_a_list_badly&lt;/span&gt;’: events 1-4 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 7 | while &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(&lt;/span&gt;&lt;/span&gt;n) { &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(1)&lt;/span&gt;&lt;/span&gt; following ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;true&lt;/span&gt;’ branch (when ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;n&lt;/span&gt;’ is non-NULL)... &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 8 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;free(n)&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(2)&lt;/span&gt;&lt;/span&gt; ...to here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(3)&lt;/span&gt;&lt;/span&gt; freed here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 9 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;n = n-&amp;#62;next&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(4)&lt;/span&gt;&lt;/span&gt; use after ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;free&lt;/span&gt;’ of ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;n&lt;/span&gt;’; freed at &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(3)&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;For freeing a non-heap pointer:&lt;/p&gt; &lt;div class="highlight" style="background: #f8f8f8;"&gt; &lt;pre style="line-height: 125%;"&gt;&lt;span style="color: #bc7a00;"&gt;#include&lt;/span&gt; &lt;span style="color: #408080; font-style: italic;"&gt;&amp;#60;stdlib.h&amp;#62;&lt;/span&gt; &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;test&lt;/span&gt;(&lt;span style="color: #b00040;"&gt;int&lt;/span&gt; n) { &lt;span style="color: #b00040;"&gt;int&lt;/span&gt; buf[&lt;span style="color: #666666;"&gt;10&lt;/span&gt;]; &lt;span style="color: #b00040;"&gt;int&lt;/span&gt; &lt;span style="color: #666666;"&gt;*&lt;/span&gt;ptr; &lt;span style="color: #008000; font-weight: bold;"&gt;if&lt;/span&gt; (n &lt;span style="color: #666666;"&gt;&amp;#60;&lt;/span&gt; &lt;span style="color: #666666;"&gt;10&lt;/span&gt;) ptr &lt;span style="color: #666666;"&gt;=&lt;/span&gt; buf; &lt;span style="color: #008000; font-weight: bold;"&gt;else&lt;/span&gt; ptr &lt;span style="color: #666666;"&gt;=&lt;/span&gt; (&lt;span style="color: #b00040;"&gt;int&lt;/span&gt; &lt;span style="color: #666666;"&gt;*&lt;/span&gt;)malloc(&lt;span style="color: #008000; font-weight: bold;"&gt;sizeof&lt;/span&gt; (&lt;span style="color: #b00040;"&gt;int&lt;/span&gt;) &lt;span style="color: #666666;"&gt;*&lt;/span&gt; n); &lt;span style="color: #408080; font-style: italic;"&gt;/* do stuff. */&lt;/span&gt; &lt;span style="color: #408080; font-style: italic;"&gt;/* oops; this free should be conditionalized. */&lt;/span&gt; free(ptr); } &lt;/pre&gt; &lt;/div&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ gcc -c -fanalyzer heap-vs-stack.c &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;heap-vs-stack.c:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;test&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;heap-vs-stack.c:16:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;warning: &lt;/span&gt;&lt;/span&gt;‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;free&lt;/span&gt;’ of ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;ptr&lt;/span&gt;’ which points to memory not on the heap [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;CWE-590&lt;/span&gt;&lt;/span&gt;] [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;-Wanalyzer-free-of-non-heap&lt;/span&gt;&lt;/span&gt;] 16 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;free(ptr)&lt;/span&gt;&lt;/span&gt;; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;^~~~~~~~~&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;test&lt;/span&gt;’: events 1-4 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 8 | if &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(&lt;/span&gt;&lt;/span&gt;n &amp;#60; 10) &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(1)&lt;/span&gt;&lt;/span&gt; following ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;true&lt;/span&gt;’ branch (when ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;n &amp;#60;= 9&lt;/span&gt;’)... &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 9 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;ptr = buf&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(2)&lt;/span&gt;&lt;/span&gt; ...to here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(3)&lt;/span&gt;&lt;/span&gt; pointer is from here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt;...... &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 16 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;free(ptr)&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(4)&lt;/span&gt;&lt;/span&gt; call to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;free&lt;/span&gt;’ here &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;For using a function that&amp;#8217;s known to be unsafe to use inside a signal handler:&lt;/p&gt; &lt;div class="highlight" style="background: #f8f8f8;"&gt; &lt;pre style="line-height: 125%;"&gt;&lt;span style="color: #bc7a00;"&gt;#include&lt;/span&gt; &lt;span style="color: #408080; font-style: italic;"&gt;&amp;#60;stdio.h&amp;#62;&lt;/span&gt; &lt;span style="color: #bc7a00;"&gt;#include&lt;/span&gt; &lt;span style="color: #408080; font-style: italic;"&gt;&amp;#60;signal.h&amp;#62;&lt;/span&gt; &lt;span style="color: #008000; font-weight: bold;"&gt;extern&lt;/span&gt; &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;body_of_program&lt;/span&gt;(&lt;span style="color: #b00040;"&gt;void&lt;/span&gt;); &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;custom_logger&lt;/span&gt;(&lt;span style="color: #008000; font-weight: bold;"&gt;const&lt;/span&gt; &lt;span style="color: #b00040;"&gt;char&lt;/span&gt; &lt;span style="color: #666666;"&gt;*&lt;/span&gt;msg) { fprintf(stderr, &lt;span style="color: #ba2121;"&gt;"LOG: %s"&lt;/span&gt;, msg); } &lt;span style="color: #008000; font-weight: bold;"&gt;static&lt;/span&gt; &lt;span style="color: #b00040;"&gt;void&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;handler&lt;/span&gt;(&lt;span style="color: #b00040;"&gt;int&lt;/span&gt; signum) { custom_logger(&lt;span style="color: #ba2121;"&gt;"got signal"&lt;/span&gt;); } &lt;span style="color: #b00040;"&gt;int&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;main&lt;/span&gt;(&lt;span style="color: #b00040;"&gt;int&lt;/span&gt; argc, &lt;span style="color: #008000; font-weight: bold;"&gt;const&lt;/span&gt; &lt;span style="color: #b00040;"&gt;char&lt;/span&gt; &lt;span style="color: #666666;"&gt;*&lt;/span&gt;argv) { custom_logger(&lt;span style="color: #ba2121;"&gt;"started"&lt;/span&gt;); signal(SIGINT, handler); body_of_program(); custom_logger(&lt;span style="color: #ba2121;"&gt;"stopped"&lt;/span&gt;); &lt;span style="color: #008000; font-weight: bold;"&gt;return&lt;/span&gt; &lt;span style="color: #666666;"&gt;0&lt;/span&gt;; } &lt;/pre&gt; &lt;/div&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ gcc -c -fanalyzer signal.c &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;signal.c:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;custom_logger&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;signal.c:8:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;warning: &lt;/span&gt;&lt;/span&gt;call to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;fprintf&lt;/span&gt;’ from within signal handler [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;CWE-479&lt;/span&gt;&lt;/span&gt;] [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;-Wanalyzer-unsafe-call-within-signal-handler&lt;/span&gt;&lt;/span&gt;] 8 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;fprintf(stderr, "LOG: %s", msg)&lt;/span&gt;&lt;/span&gt;; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;main&lt;/span&gt;’: events 1-2 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 16 | int &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;main&lt;/span&gt;&lt;/span&gt;(int argc, const char *argv) &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(1)&lt;/span&gt;&lt;/span&gt; entry to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;main&lt;/span&gt;’ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt;...... &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 20 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;signal(SIGINT, handler)&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(2)&lt;/span&gt;&lt;/span&gt; registering ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;handler&lt;/span&gt;’ as signal handler &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; event 3 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;cc1:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(3)&lt;/span&gt;&lt;/span&gt;: later on, when the signal is delivered to the process &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;+--&amp;#62; &lt;/span&gt;&lt;/span&gt;‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;handler&lt;/span&gt;’: events 4-5 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 11 | static void &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;handler&lt;/span&gt;&lt;/span&gt;(int signum) &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(4)&lt;/span&gt;&lt;/span&gt; entry to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;handler&lt;/span&gt;’ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 12 | { &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 13 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;custom_logger("got signal")&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(5)&lt;/span&gt;&lt;/span&gt; calling ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;custom_logger&lt;/span&gt;’ from ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;handler&lt;/span&gt;’ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;+--&amp;#62; &lt;/span&gt;&lt;/span&gt;‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;custom_logger&lt;/span&gt;’: events 6-7 &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 6 | void &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;custom_logger&lt;/span&gt;&lt;/span&gt;(const char *msg) &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(6)&lt;/span&gt;&lt;/span&gt; entry to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;custom_logger&lt;/span&gt;’ &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 7 | { &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; 8 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;fprintf(stderr, "LOG: %s", msg)&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;(7)&lt;/span&gt;&lt;/span&gt; call to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;fprintf&lt;/span&gt;’ from within signal handler &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;Along with &lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Static-Analyzer-Options.html" target="_blank" rel="noopener noreferrer"&gt;other warnings&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;What&amp;#8217;s left to do?&lt;/h2&gt; &lt;p&gt;As it stands, the checker works well on small- and medium-sized examples, but there are two problem areas I&amp;#8217;m running into as I scale it up to real-world C code. First, there are bugs in my state-management code. Within the checker are classes for describing program state in an abstract way. The checker explores the program, building a directed graph of (point, state) pairs with logic for simplifying state and merging state at control flow join-points.&lt;/p&gt; &lt;p&gt;In theory, if the state gets too complicated, the checker is meant to go into a least-defined state, but there are bugs with this approach that lead to the number of states at a given point exploding, which then leads to the checker running slowly, eventually hitting a safety limit, and not fully exploring the program. To fix this, I&amp;#8217;ve been rewriting the guts of the state-management code. I hope to land the rewrite in &amp;#8220;master&amp;#8221; next week.&lt;/p&gt; &lt;p&gt;Second, even if we do fully explore the program, the paths through the code generated by &lt;code&gt;-fanalyzer&lt;/code&gt; are sometimes ludicrously verbose. The worst I&amp;#8217;ve seen is a 110-event path for the use of uninitialized data reported when compiling GCC itself. I think this one was a false positive, but clearly it&amp;#8217;s unreasonable to expect users to wade through something like that.&lt;/p&gt; &lt;p&gt;The analyzer tries to find the shortest feasible path through the (point, state) graph, generates a chain of events from it, and then tries to simplify the chain. Effectively, it&amp;#8217;s applying a series of peephole optimizations to the chain of events to come up with a minimal chain that expresses the problem.&lt;/p&gt; &lt;p&gt;I recently implemented a way of filtering irrelevant control-flow edges from the path, which ought to help, and I&amp;#8217;m working on a similar patch to eliminate redundant interprocedural edges.&lt;/p&gt; &lt;p&gt;To give a concrete example, I tried the analyzer on a real bug (albeit one from fifteen years ago)—&lt;a href="https://access.redhat.com/security/cve/cve-2005-1689" target="_blank" rel="noopener noreferrer"&gt;CVE-2005-1689&lt;/a&gt;, a double-free vulnerability in krb5 1.4.1. It correctly identifies the bug with no false positives, but the output is currently 170 lines of stderr. Rather than showing the output inline here, you can see it at &lt;a href="https://dmalcolm.fedorapeople.org/gcc/2020-02-28/recvauth.c.html" target="_blank" rel="noopener noreferrer"&gt;this link&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Initially, the above was 1187 lines of stderr. I fixed various bugs and implemented more simplifications to get it down to 170 lines. Part of the problem is that the &lt;code&gt;free&lt;/code&gt; is being done through a &lt;code&gt;krb5_xfree&lt;/code&gt; macro and the path-printing code shows how each macro is expanded each time an event occurs within a macro. Perhaps the output should only show each macro expansion once per diagnostic. Also, the first few events in each diagnostic are interprocedural logic that&amp;#8217;s not really relevant to the user (I&amp;#8217;m working on a fix for that). With these changes, the output should be considerably shorter.&lt;/p&gt; &lt;p&gt;Perhaps a better interface might write out a separate HTML file, one per warning, and emit a &amp;#8220;note&amp;#8221; giving the location of the additional information?&lt;/p&gt; &lt;p&gt;I want to give the end-user enough information to act on a warning, but without overwhelming them. Are there better ways of presenting this? Let me know in the comments.&lt;/p&gt; &lt;h2&gt;Trying it out&lt;/h2&gt; &lt;p&gt;GCC 10 will be in Fedora 32, which should be out in a couple of months.&lt;/p&gt; &lt;p&gt;For simple code examples, you can play around with the new GCC online at &lt;a href="https://godbolt.org/" target="_blank" rel="noopener noreferrer"&gt;godbolt.org&lt;/a&gt; (select gcc &amp;#8220;trunk&amp;#8221; and add &lt;code&gt;-fanalyzer&lt;/code&gt; to the compiler options).&lt;/p&gt; &lt;p&gt;Have fun!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F26%2Fstatic-analysis-in-gcc-10%2F&amp;#38;linkname=Static%20analysis%20in%20GCC%2010" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F26%2Fstatic-analysis-in-gcc-10%2F&amp;#38;linkname=Static%20analysis%20in%20GCC%2010" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F26%2Fstatic-analysis-in-gcc-10%2F&amp;#38;linkname=Static%20analysis%20in%20GCC%2010" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F26%2Fstatic-analysis-in-gcc-10%2F&amp;#38;linkname=Static%20analysis%20in%20GCC%2010" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F26%2Fstatic-analysis-in-gcc-10%2F&amp;#38;linkname=Static%20analysis%20in%20GCC%2010" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F26%2Fstatic-analysis-in-gcc-10%2F&amp;#38;linkname=Static%20analysis%20in%20GCC%2010" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F26%2Fstatic-analysis-in-gcc-10%2F&amp;#38;linkname=Static%20analysis%20in%20GCC%2010" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F26%2Fstatic-analysis-in-gcc-10%2F&amp;#038;title=Static%20analysis%20in%20GCC%2010" data-a2a-url="https://developers.redhat.com/blog/2020/03/26/static-analysis-in-gcc-10/" data-a2a-title="Static analysis in GCC 10"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/26/static-analysis-in-gcc-10/"&gt;Static analysis in GCC 10&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/TDcC4qlLEHs" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;I work at Red Hat on GCC, the GNU Compiler Collection. For the next major release of GCC, GCC 10, I&amp;#8217;ve been implementing a new -fanalyzer option: A static analysis pass to identify various problems at compile-time, rather than at runtime. My thinking here is that it&amp;#8217;s best to catch problems as early as possible [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/26/static-analysis-in-gcc-10/"&gt;Static analysis in GCC 10&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">689087</post-id><dc:creator>David Malcolm</dc:creator><dc:date>2020-03-26T07:00:33Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/03/26/static-analysis-in-gcc-10/</feedburner:origLink></entry><entry><title>Learn DMN in 15 minutes</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/cB4qkVqR2kA/learn-dmn-in-15-minutes.html" /><category term="feed_group_name_drools" scheme="searchisko:content:tags" /><category term="feed_name_drools" scheme="searchisko:content:tags" /><author><name>Unknown</name></author><id>searchisko:content:id:jbossorg_blog-learn_dmn_in_15_minutes</id><updated>2020-03-25T21:54:45Z</updated><published>2020-03-25T21:53:00Z</published><content type="html">&lt;p&gt;Today we have a new announcement for new DMN users: the &lt;a href="http://learn-dmn-in-15-minutes.com"&gt;learn-dmn-in-15-minutes.com&lt;/a&gt; course!&lt;/p&gt; &lt;p&gt;DMN is already simple and easy to understand at first glance. However, new adopters generally want to check a quick overview and learn about the most important parts, before jumping on a more in-depth journey. That's the goal of this course!&lt;/p&gt; &lt;p&gt;Now newcomers can: &lt;li&gt;Learn DMN in 15 minutes&lt;/li&gt; &lt;li&gt;Quickly create a DMN model on &lt;a href="http://dmn.new"&gt;dmn.new&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Execute their first decision model on &lt;a href="https://kogito.kie.org"&gt;kogito.kie.org&lt;/a&gt;&lt;/li&gt;&lt;/p&gt; &lt;a href="https://1.bp.blogspot.com/-voxwROPCX9k/XnvSmY1R3_I/AAAAAAAAC8M/BAVvMg_dX-IV0oKupDOSP5M0gRaLy7xRgCLcBGAsYHQ/s1600/learn-dmn.png" imageanchor="1" &gt;&lt;img border="0" src="https://1.bp.blogspot.com/-voxwROPCX9k/XnvSmY1R3_I/AAAAAAAAC8M/BAVvMg_dX-IV0oKupDOSP5M0gRaLy7xRgCLcBGAsYHQ/s1600/learn-dmn.png" data-original-width="1600" width="100%" data-original-height="998" /&gt;&lt;/a&gt; &lt;p&gt;Stay tuned for new content! &lt;/p&gt; &lt;div class="feedflare"&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=LvPVIIBd_qM:v85UVbSpxgg:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=LvPVIIBd_qM:v85UVbSpxgg:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=LvPVIIBd_qM:v85UVbSpxgg:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=LvPVIIBd_qM:v85UVbSpxgg:dnMXMwOfBR0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=dnMXMwOfBR0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=LvPVIIBd_qM:v85UVbSpxgg:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=LvPVIIBd_qM:v85UVbSpxgg:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=LvPVIIBd_qM:v85UVbSpxgg:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=LvPVIIBd_qM:v85UVbSpxgg:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=LvPVIIBd_qM:v85UVbSpxgg:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=LvPVIIBd_qM:v85UVbSpxgg:jWeZv7XsJd0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=jWeZv7XsJd0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/DroolsAtom/~4/LvPVIIBd_qM" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/cB4qkVqR2kA" height="1" width="1" alt=""/&gt;</content><summary>Today we have a new announcement for new DMN users: the learn-dmn-in-15-minutes.com course! DMN is already simple and easy to understand at first glance. However, new adopters generally want to check a quick overview and learn about the most important parts, before jumping on a more in-depth journey. That's the goal of this course! Now newcomers can: Learn DMN in 15 minutes Quickly create a DMN mo...</summary><dc:creator>Unknown</dc:creator><dc:date>2020-03-25T21:53:00Z</dc:date><feedburner:origLink>http://feeds.athico.com/~r/DroolsAtom/~3/LvPVIIBd_qM/learn-dmn-in-15-minutes.html</feedburner:origLink></entry><entry><title>Best Practices for Middleware and Integration Architecture Modernization with Apache Camel</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/IeOOh_q1ZVU/best-practices-for-middleware-and.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><category term="Presentation" scheme="searchisko:content:tags" /><category term="video" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-best_practices_for_middleware_and_integration_architecture_modernization_with_apache_camel</id><updated>2020-03-25T08:36:32Z</updated><published>2020-03-25T08:36:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;Yesterday I gave the following virtual talk at the &lt;a href="https://www.meetup.com/Stockholm-FullStack-SecDevOps-Engineering-Meetup/events/269204017/"&gt;Stockholm Meetup&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Best Practices for Middleware and Integration Architecture Modernization with Apache Camel&lt;/b&gt;&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;What are important considerations when modernizing middleware and moving towards serverless and/or cloud native integration architectures? How can we make the most of flexible technologies such as Camel K, Kafka, Quarkus and OpenShift. Claus is working as project lead on Apache Camel and has extensive experience from open source product development.&lt;/blockquote&gt;I thank the organizers Forefront Consulting for inviting me. Unfortunately there was a glitch with the talk yesterday. As I could not be in person then the talk was pre-recorded and was cut half way. So I promised to post a blog today and upload the talk to &lt;a href="https://www.youtube.com/watch?v=d1Hr78a7Lww"&gt;youtube&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;iframe width="320" height="266" class="YOUTUBE-iframe-video" data-thumbnail-src="https://i.ytimg.com/vi/d1Hr78a7Lww/0.jpg" src="https://www.youtube.com/embed/d1Hr78a7Lww?feature=player_embedded" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br /&gt;The title and abstract of the talk was somewhat given to me, and so was the session length of 30 minutes. As I am so heavily invested in Apache Camel, then I focused the talk about Camel and its evolution over the last 10 years as introduction and then using the latest innovations from Camel K, Camel Quarkus and Camel Kafka Connectors as the meat of the talk, and with 3 demos.&lt;br /&gt;&lt;br /&gt;The talk can be &lt;a href="https://www.youtube.com/watch?v=d1Hr78a7Lww"&gt;watched on youtube&lt;/a&gt; and the &lt;a href="https://www.slideshare.net/davsclaus/best-practices-for-middleware-and-integration-architecture-modernization-with-apache-camel"&gt;slides are here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=MINg7l5P6bI:FYmxgJw9T_c:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=MINg7l5P6bI:FYmxgJw9T_c:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=MINg7l5P6bI:FYmxgJw9T_c:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=MINg7l5P6bI:FYmxgJw9T_c:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=MINg7l5P6bI:FYmxgJw9T_c:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=MINg7l5P6bI:FYmxgJw9T_c:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=MINg7l5P6bI:FYmxgJw9T_c:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/MINg7l5P6bI" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/IeOOh_q1ZVU" height="1" width="1" alt=""/&gt;</content><summary>Yesterday I gave the following virtual talk at the Stockholm Meetup. Best Practices for Middleware and Integration Architecture Modernization with Apache Camel What are important considerations when modernizing middleware and moving towards serverless and/or cloud native integration architectures? How can we make the most of flexible technologies such as Camel K, Kafka, Quarkus and OpenShift. Clau...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2020-03-25T08:36:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/MINg7l5P6bI/best-practices-for-middleware-and.html</feedburner:origLink></entry><entry><title>Low-code microservices orchestration with Syndesis</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/NIrhv3kB8yA/" /><category term="Kubernetes" /><category term="Microservices" /><category term="Stream Processing" /><category term="cloud native" /><category term="debezium" /><category term="Integration" /><category term="microservices" /><category term="openshift" /><author><name>Pasquale Congiusti</name></author><id>https://developers.redhat.com/blog/?p=670847</id><updated>2020-03-25T07:00:33Z</updated><published>2020-03-25T07:00:33Z</published><content type="html">&lt;p&gt;Recently I wrote about &lt;a href="https://developers.redhat.com/blog/2019/11/19/decoupling-microservices-with-apache-camel-and-debezium/" target="_blank" rel="noopener noreferrer"&gt;decoupling infrastructure code from microservices&lt;/a&gt;. I found that &lt;a href="https://camel.apache.org/" target="_blank" rel="noopener noreferrer"&gt;Apache Camel&lt;/a&gt; and &lt;a href="https://debezium.io/" target="_blank" rel="noopener noreferrer"&gt;Debezium&lt;/a&gt; provided the middleware I needed for that project, with minimal coding on my end. After my successful experiment, I wondered if it would be possible to orchestrate two or more similarly decoupled microservices into a new service–and &lt;em&gt;could I do it without writing any code at all&lt;/em&gt;? I decided to find out.&lt;/p&gt; &lt;p&gt;This article is a quick dive into orchestrating microservices without writing any code. We will use &lt;a href="https://syndesis.io/" target="_blank" rel="noopener noreferrer"&gt;Syndesis (an open source integration platform)&lt;/a&gt; as our orchestration platform. Note that the examples assume that you are familiar with Debezium and Kafka.&lt;/p&gt; &lt;p&gt;&lt;span id="more-670847"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;About Syndesis&lt;/h2&gt; &lt;p&gt;Syndesis is an open source integration platform that can connect to any service you use. It targets &lt;a href="https://syndesis.io/about/#citizen-integrator" target="_blank" rel="noopener noreferrer"&gt;citizen integrators&lt;/a&gt;, who are usually business-domain experts who want to quickly combine existing data sources into new microservices without writing any code. These users have valuable business expertise, and a microservices architecture provides the ideal platform for transforming their knowledge into business services. What&amp;#8217;s needed is an integration platform to connect their business expertise to the technology back end.&lt;/p&gt; &lt;p&gt;Note that Syndesis is the open source project for &lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/fuse-online" target="_blank" rel="noopener noreferrer"&gt;Red Hat Fuse Online&lt;/a&gt;. Fuse Online runs on &lt;a href="https://www.openshift.com/products/online/" target="_blank" rel="noopener noreferrer"&gt;Red Hat OpenShift Online&lt;/a&gt;, &lt;a href="https://www.openshift.com/products/dedicated/" target="_blank" rel="noopener noreferrer"&gt;Red Hat OpenShift Dedicated&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/products/openshift" target="_blank" rel="noopener noreferrer"&gt;Red Hat OpenShift Container Platform&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Microservices orchestration with Syndesis&lt;/h2&gt; &lt;p&gt;Our goal is to integrate two or more microservices to create a new notification service for a game-store platform. Using Syndesis as our integrated platform-as-a-service (iPaaS) lets us orchestrate existing microservices without writing any code. We assume a microservices architecture where Debezium and Kafka have already been implemented to decouple infrastructure code from the microservices, following an approach similar to the one demonstrated in my &lt;a href="https://developers.redhat.com/blog/2019/11/19/decoupling-microservices-with-apache-camel-and-debezium/" target="_blank" rel="noopener noreferrer"&gt;previous article&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Our game store has an established set of microservices running different parts of the business. For this project, we&amp;#8217;re interested in the &lt;code&gt;GamePrice&lt;/code&gt; and &lt;code&gt;UserPreference&lt;/code&gt; services. &lt;code&gt;GamePrice&lt;/code&gt; provides the price of each game in the store. &lt;code&gt;UserPreference&lt;/code&gt; is an AI engine that matches users with games they will like. Each microservice exposes an API that we can view in its OpenAPI documentation.&lt;/p&gt; &lt;p&gt;The game store occasionally uses the &lt;code&gt;GamePrice&lt;/code&gt; service for product promotions and giveaways. Now we want to integrate &lt;code&gt;GamePrice&lt;/code&gt; with &lt;code&gt;UserPreference&lt;/code&gt; to create a new microservice for email alerts. The service will alert subscribers when a selected game is offered for free. Our integration platform, Syndesis, integrated with a Debezium connector, makes it easy to capture changes in the &lt;code&gt;GamePrice&lt;/code&gt; domain. It will also automatically generate the integration logic connecting our existing microservices, and it will send a personalized email alert to interested users&amp;#8217; (&lt;code&gt;UserPreference&lt;/code&gt; domain). Kafka will be the messaging infrastructure where Debezium produces change data events. We won&amp;#8217;t need to write any code to get our new notification system up and running.&lt;/p&gt; &lt;h3&gt;Step 1: Configure microservices endpoints&lt;/h3&gt; &lt;p&gt;To start, we need to configure Syndesis to use the &lt;code&gt;GamePrice&lt;/code&gt; and &lt;code&gt;UserPreference&lt;/code&gt; APIs. We do that by providing their OpenAPI endpoints, as shown in Figure 1. (Note that this feature is provided by &lt;a href="https://www.apicur.io/" target="_blank" rel="noopener noreferrer"&gt;Apicurio&lt;/a&gt;.)&lt;/p&gt; &lt;div id="attachment_689707" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-689707" class="wp-image-689707" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-api.png" alt="A screenshot of the OpenAPI endpoint screen in Syndesis." width="640" height="568" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-api.png 801w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-api-300x266.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-api-768x682.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-689707" class="wp-caption-text"&gt;Figure 1. Configure the OpenAPI endpoints.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Step 2: Capture data changes in the database&lt;/h3&gt; &lt;p&gt;Next, we need to capture changes to price data in the database. We can create event streams to capture such changes. We&amp;#8217;ll use a Syndesis Debezium connector pointing to a Kafka broker, which we assume has been previously configured. Kafka is the infrastructure used by Debezium to produce change data events. By selecting the broker we will tell Syndesis which events we need to consume. Figure 2 shows this configuration.&lt;/p&gt; &lt;div id="attachment_689697" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-689697" class="wp-image-689697 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-debezium-1024x458.png" alt="A screenshot of the database-configuration page in Syndesis." width="640" height="286" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-debezium-1024x458.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-debezium-300x134.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-debezium-768x343.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-debezium.png 1260w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-689697" class="wp-caption-text"&gt;Figure 2. Capture data changes.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Step 3: Configure the email service&lt;/h3&gt; &lt;p&gt;Finally, we configure the email service. For this example, I chose to use an SMTP service (as shown in Figure 3), but you could use virtually any notification type or service.&lt;/p&gt; &lt;div id="attachment_689657" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-689657" class="wp-image-689657 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-email-configuration-1024x688.png" alt="A screenshot of the email service configuration screen in Syndesis." width="640" height="430" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-email-configuration-1024x688.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-email-configuration-300x202.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-email-configuration-768x516.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-email-configuration.png 1331w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-689657" class="wp-caption-text"&gt;Figure 3. Configure the email service.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Building the integration pipeline&lt;/h2&gt; &lt;p&gt;We&amp;#8217;ve configured all the microservices we need for our orchestrated email alerts. Our next step will be to ingrate the &lt;code&gt;GamePrice&lt;/code&gt;, &lt;code&gt;UserPreference&lt;/code&gt;, &lt;code&gt;GamePrice CDC&lt;/code&gt;, and &lt;code&gt;Email&lt;/code&gt; services into a new pipeline. These services are shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_689727" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-689727" class="wp-image-689727 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-connections-1024x315.png" alt="A screenshot of available microservices in the Syndesis integration dashboard." width="640" height="197" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-connections-1024x315.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-connections-300x92.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-connections-768x236.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-689727" class="wp-caption-text"&gt;Figure 4. Microservices displayed in the Syndesis integration .&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Our completed integration pipeline will look like the diagram in Figure 5.&lt;/p&gt; &lt;div id="attachment_689737" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-689737" class="wp-image-689737" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-integration-diagram.png" alt="A diagram of the integration pipeline." width="640" height="399" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-integration-diagram.png 700w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-integration-diagram-300x187.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-689737" class="wp-caption-text"&gt;Figure 5. The completed integration pipeline.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Let&amp;#8217;s get started!&lt;/p&gt; &lt;h3&gt;Step 1: Create the integration pipeline&lt;/h3&gt; &lt;p&gt;We&amp;#8217;ll start by selecting the Debezium connector as a source. We select the Kafka topic we need to listen to and a special Kafka topic as shown in Figure 6. Syndesis will use the events produced in the first topic in order to pick the &lt;code&gt;GamePrice&lt;/code&gt;drop. It will use the second topic to analyze the event data structure and allow the integrator to map that data to each step in the integration.&lt;/p&gt; &lt;div id="attachment_689647" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-689647" class="wp-image-689647" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-debezium-source.png" alt="A screenshot of the new-integration screen in Syndesis." width="640" height="450" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-debezium-source.png 922w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-debezium-source-300x211.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-debezium-source-768x541.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-689647" class="wp-caption-text"&gt;Figure 6. Create the integration pipeline.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Step 2: Add steps and connections&lt;/h3&gt; &lt;p&gt;Next, we begin filling in our pipeline as shown in Figure 7. As a destination, we use a &lt;a href="https://www.modeling-guidelines.org/guidelines/correct-usage-of-conditional-and-default-flows" target="_blank" rel="noopener noreferrer"&gt;conditional flow&lt;/a&gt; that filters for price updates. Notice that you can add other conditions based on the complexity of your integration. We&amp;#8217;ll also add a logging action to trace the results of each execution.&lt;/p&gt; &lt;div id="attachment_689717" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-689717" class="wp-image-689717 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-integration-1024x742.png" alt="A screenshot of the Syndesis screen for adding new steps and connections to the integration pipeline." width="640" height="464" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-integration-1024x742.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-integration-300x217.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-integration-768x556.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-integration.png 1026w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-689717" class="wp-caption-text"&gt;Figure 7. Add steps and connections to the integration pipeline.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Step 3: Retrieve user preferences&lt;/h3&gt; &lt;p&gt;Next, we call the &lt;code&gt;UserPreference&lt;/code&gt; API to retrieve the list of users potentially interested in a particular offer as shown in Figure 8. We&amp;#8217;ll use this list to send emails informing them of promotions and giveaways.&lt;/p&gt; &lt;div id="attachment_689747" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-689747" class="wp-image-689747" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-data-mapper-1024x633.png" alt="A screenshot showing the mapping between game_id and gameLiked in the UserPreference API." width="640" height="755" /&gt;&lt;p id="caption-attachment-689747" class="wp-caption-text"&gt;Figure 8. Retrieve user preferences.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Before we continue to the final steps, let&amp;#8217;s look at the overall flow of the pipeline, as shown in Figure 9.&lt;/p&gt; &lt;div id="attachment_689747" style="width: 608px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-689747" class="wp-image-689747 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-flow.png" alt="A screenshot showing each phase and action in the pipeline." width="598" height="705" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-flow.png 598w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-flow-254x300.png 254w" sizes="(max-width: 598px) 100vw, 598px" /&gt;&lt;p id="caption-attachment-689747" class="wp-caption-text"&gt;Figure 9. The integration pipeline from end to end.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In the first step (1 in figure 9), a change in price starts the flow. The next step is the basic filter (2 in figure 9), which we&amp;#8217;ve configured to notify us of events where a price has dropped to zero (&lt;code&gt;price=0&lt;/code&gt;). Next, we go to the &lt;code&gt;UserPreference&lt;/code&gt; API (4 in figure 9), where we select the endpoint and retrieve a list of users likely to be interested in the specified event. Notice that in the &lt;code&gt;UserPreference&lt;/code&gt; API, we also had to do some data mapping (3 in figure 9), which we did visually thanks to a feature provided by &lt;a href="https://www.atlasmap.io/" target="_blank" rel="noopener noreferrer"&gt;AtlasMap&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Step 4: Split the data&lt;/h3&gt; &lt;p&gt;Next, we continue to (5 in figure 9), where we split the list of users obtained in (4 in figure 9). We need to &lt;a href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/Sequencer.html"&gt;split data&lt;/a&gt; in order to treat each user separately as we want to personalize email message.&lt;/p&gt; &lt;h3&gt;Step 5: Customize the message&lt;/h3&gt; &lt;p&gt;Now, we are almost ready to send our selected users a promotional invitation. But before we do, let&amp;#8217;s use the template feature (7 in figure 9) to personalize our message, as shown in Figure 10.&lt;/p&gt; &lt;div id="attachment_689677" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-689677" class="wp-image-689677 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-email-template-1024x664.png" alt="A screenshot of the template screen in Syndesis." width="640" height="415" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-email-template-1024x664.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-email-template-300x195.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-email-template-768x498.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-email-template.png 1394w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-689677" class="wp-caption-text"&gt;Figure 10. Templates in the Syndesis pipeline.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;After we&amp;#8217;ve uploaded our custom template, we return to the Data Mapper (8 in figure 9) to define a new mapping that will generate a personalized message for each user. (This configuration is similar to what we did in (3 in figure 9).)&lt;/p&gt; &lt;h3&gt;Step 6: Send the email&lt;/h3&gt; &lt;p&gt;Finally, we are ready to send the email, which combines our personalized message with the email addresses we pulled from the &lt;code&gt;UserPreference service&lt;/code&gt;. Figure 11 shows the result of a live execution.&lt;/p&gt; &lt;div id="attachment_689687" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-689687" class="wp-image-689687" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-email-sent.png" alt="Screenshot of an email for 'Game giveaway!'" width="640" height="265" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-email-sent.png 800w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-email-sent-300x124.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/syndesis-email-sent-768x318.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-689687" class="wp-caption-text"&gt;Figure 11. A personalized email sent from the new microservice.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The code and steps to run this example are available in my &lt;a href="https://github.com/squakez/ms-orchestration-syndesis" target="_blank" rel="noopener noreferrer"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;You&amp;#8217;ve seen in this article how to use Syndesis to integrate two existing microservices into a new, personalized service for added business value–and you&amp;#8217;ve seen that it&amp;#8217;s possible to do it without writing a single line of code. Using Syndesis, a business expert without programming experience could discover microservices in a services dashboard, compose a pipeline based on one or more of those existing services, correlate data from the services, and build the integration.&lt;/p&gt; &lt;p&gt;All that&amp;#8217;s left to do is to start dreaming up integrations that will bring added value to your business.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F25%2Flow-code-microservices-orchestration-with-syndesis%2F&amp;#38;linkname=Low-code%20microservices%20orchestration%20with%20Syndesis" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F25%2Flow-code-microservices-orchestration-with-syndesis%2F&amp;#38;linkname=Low-code%20microservices%20orchestration%20with%20Syndesis" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F25%2Flow-code-microservices-orchestration-with-syndesis%2F&amp;#38;linkname=Low-code%20microservices%20orchestration%20with%20Syndesis" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F25%2Flow-code-microservices-orchestration-with-syndesis%2F&amp;#38;linkname=Low-code%20microservices%20orchestration%20with%20Syndesis" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F25%2Flow-code-microservices-orchestration-with-syndesis%2F&amp;#38;linkname=Low-code%20microservices%20orchestration%20with%20Syndesis" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F25%2Flow-code-microservices-orchestration-with-syndesis%2F&amp;#38;linkname=Low-code%20microservices%20orchestration%20with%20Syndesis" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F25%2Flow-code-microservices-orchestration-with-syndesis%2F&amp;#38;linkname=Low-code%20microservices%20orchestration%20with%20Syndesis" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F25%2Flow-code-microservices-orchestration-with-syndesis%2F&amp;#038;title=Low-code%20microservices%20orchestration%20with%20Syndesis" data-a2a-url="https://developers.redhat.com/blog/2020/03/25/low-code-microservices-orchestration-with-syndesis/" data-a2a-title="Low-code microservices orchestration with Syndesis"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/25/low-code-microservices-orchestration-with-syndesis/"&gt;Low-code microservices orchestration with Syndesis&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/NIrhv3kB8yA" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Recently I wrote about decoupling infrastructure code from microservices. I found that Apache Camel and Debezium provided the middleware I needed for that project, with minimal coding on my end. After my successful experiment, I wondered if it would be possible to orchestrate two or more similarly decoupled microservices into a new service–and could I [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/25/low-code-microservices-orchestration-with-syndesis/"&gt;Low-code microservices orchestration with Syndesis&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">670847</post-id><dc:creator>Pasquale Congiusti</dc:creator><dc:date>2020-03-25T07:00:33Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/03/25/low-code-microservices-orchestration-with-syndesis/</feedburner:origLink></entry><entry><title>Red Hat Universal Base Images for Docker users</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/-48C1znKQYM/" /><category term="Containers" /><category term="Linux" /><category term="PHP" /><category term="Universal Base Images (UBI)" /><category term="Windows" /><category term="Docker" /><category term="MacOS" /><category term="open source projects" /><category term="RHEL" /><author><name>Fernando Lozano</name></author><id>https://developers.redhat.com/blog/?p=691797</id><updated>2020-03-24T07:00:01Z</updated><published>2020-03-24T07:00:01Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/products/rhel/ubi/" target="_blank" rel="noopener noreferrer"&gt;Red Hat Universal Base Images (UBIs)&lt;/a&gt; allow developers using Docker on Windows and Mac platforms to tap into the benefits of the large Red Hat ecosystem. This article demonstrates how to use Red Hat Universal Base Images with Docker from a non-Red Hat system, such as a Windows or Mac workstation.&lt;/p&gt; &lt;h2&gt;Red Hat Enterprise Linux and Docker&lt;/h2&gt; &lt;p&gt;When Red Hat Enterprise Linux (RHEL) 8 was released almost a year ago, and it came with lots of new features related to containers. The biggest ones were the new container tools (Podman, Buildah, and skopeo) and the new Red Hat Universal Base Images. There was also confusion because RHEL 8 dropped support for the Docker toolset. Some developers thought that they could not work with Docker anymore, and had to either migrate to a Red Hat-ecosystem Linux system such as CentOS or stay away from Red Hat customers.&lt;/p&gt; &lt;p&gt;&lt;span id="more-691797"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;This situation was far from the truth because containers are not just about Docker anymore. Container runtimes, container images, registry servers, and other technologies related to the Linux container ecosystem are now standardized by the &lt;a href="https://www.opencontainers.org/" target="_blank" rel="noopener noreferrer"&gt;Open Container Initiative&lt;/a&gt; (OCI). Thanks to the OCI, you can develop a container using one tool and then run the same container using another tool. For example, Red Hat builds a container image using Buildah on RHEL 8, and then you run that container image using Docker on a Windows system.&lt;/p&gt; &lt;p&gt;Another example would be you building a container image using Docker on a Mac system and then later you run that container image on a Red Hat Enterprise Linux 8 server with Podman.&lt;/p&gt; &lt;h2&gt;Introducing Red Hat Universal Base Images&lt;/h2&gt; &lt;p&gt;Red Hat Universal Base images allow commercial and open source developers to build containers based on RHEL without requiring them or their users to be RHEL subscribers. Open source developers need the ability to run and share their applications anywhere, unencumbered by user agreements. While the Red Hat Developer subscription is useful and popular, it was not the best fit for them.&lt;/p&gt; &lt;p&gt;Some commercial developers want to target both Red Hat customers and non-Red Hat customers. Their Red Hat customers want the ability to use Red Hat support services to their fullest, which implies running container images based on RHEL. So, these developers had to build two versions of their container images, one based on Red Hat Enterprise Linux, and others based on something else, or they had to deny their customers the ability to rely on Red Hat’s support services.&lt;/p&gt; &lt;p&gt;Commercial and open source developers can use UBI to build container images from RHEL packages, and benefit from Red Hat’s fixes to performance and security issues. At the same time, using UBIs does not require any entitlement to a Red Hat subscription, not even a free Red Hat Developer program subscription.&lt;/p&gt; &lt;h3&gt;Universal Base Images and packages&lt;/h3&gt; &lt;p&gt;UBIs provide a set of base container images to build your application images. Some of these images include only the base operating systems. Others are runtime images that provide a runtime with its dependencies pre-integrated.&lt;/p&gt; &lt;p&gt;UBIs also provide a set of Yum repositories that include a subset of Red Hat Enterprise Linux packages. Not all of RHEL is part of the UBI repositories. As an example, UBIs do not include packages related to low-level network and storage servers.&lt;/p&gt; &lt;h3&gt;Exploring Universal Base Images&lt;/h3&gt; &lt;p&gt;The best way to see what is provided by UBIs is through a few searches. In the following examples, the prompt is &lt;code&gt;$&lt;/code&gt;, which could be on a Mac system running Docker Desktop. This same prompt could also be on a Windows Home system using Docker tools from a Cygwin terminal, or a Windows Professional system using Docker Desktop. It could even be on a non-Red Hat Linux distribution.&lt;/p&gt; &lt;p&gt;First, do a search for all UBI base images on the &lt;a href="https://registry.access.redhat.com"&gt;Red Hat Container Registry&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;$ docker search registry.access.redhat.com/ubi NAME                                          DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED jboss-eap-7/eap72-openjdk11-openshift-rhel8   JBoss EAP 7.2 OpenJDK 11 Container Image for…   0       ubi8/ubi-init                                 Provides the latest release of the Red Hat U…   0       ubi8/ubi                                      Provides the latest release of the Red Hat U…   0       ubi8/ubi-minimal                              Provides the latest release of the Minimal R…   0       ubi7/ubi-init                                 The Universal Base Image Init is designed to…   0       ubi7/ubi                                      The Universal Base Image is designed and eng…   0       ubi7/ubi-minimal                              The Universal Base Image Init is designed to…   0 &lt;/pre&gt; &lt;p&gt;The Red Hat Container Registry is a public registry that hosts all UBI container images. These same images are also available from the &lt;a href="https://registry.redhat.io"&gt;Red Hat terms-based container registry&lt;/a&gt;. That registry server requires you to authenticate to prove that you have a valid Red Hat subscription. During this article, I’ll stick to Red Hat’s public registry for ease of use.&lt;/p&gt; &lt;p&gt;Now, start a UBI test container running an interactive shell:&lt;/p&gt; &lt;pre&gt;$ docker run -it --name test registry.access.redhat.com/ubi8/ubi:8.1 bash Unable to find image 'registry.access.redhat.com/ubi8/ubi:8.1' locally 8.1: Pulling from ubi8/ubi eae5d284042d: Pull complete ff6f434a470a: Pull complete Digest: sha256:b6ae810838a1a105b568e5b438a4379ac5e06ee8df1c11d71772f8708180ffcc Status: Downloaded newer image for registry.access.redhat.com/ubi8/ubi:8.1 [root@de1d73d88418 /]#&lt;/pre&gt; &lt;p&gt;Inside the test container, list its preconfigured Yum repositories:&lt;/p&gt; &lt;pre&gt;[root@de1d73d88418 /]# yum repolist Updating Subscription Management repositories. Unable to read consumer identity This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register. Red Hat Universal Base Image 8 (RPMs) - BaseOS                                                      123 kB/s | 760 kB     00:06     Red Hat Universal Base Image 8 (RPMs) - AppStream                                                   301 kB/s | 3.3 MB     00:11     Red Hat Universal Base Image 8 (RPMs) - CodeReady Builder                                           2.2 kB/s | 9.1 kB     00:04     repo id                                       repo name                                                                       status ubi-8-appstream                               Red Hat Universal Base Image 8 (RPMs) - AppStream                               819 ubi-8-baseos                                  Red Hat Universal Base Image 8 (RPMs) - BaseOS                                  664 ubi-8-codeready-builder                       Red Hat Universal Base Image 8 (RPMs) - CodeReady Builder                        12&lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can safely ignore Yum messages about Red Hat’s subscription manager. UBI images are designed to work for Red Hat subscribers as well, letting them add packages from Red Hat Enterprise Linux that require a valid entitlement.&lt;/p&gt; &lt;p&gt;You can also search for individual packages available from these repositories. The following example searches for Nginx web server packages:&lt;/p&gt; &lt;pre&gt;[root@de1d73d88418 /]# yum search nginx Updating Subscription Management repositories. Unable to read consumer identity This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register. Last metadata expiration check: 0:00:06 ago on Mon Feb 24 23:37:46 2020. =================================================== Name Exactly Matched: nginx ==================================================== nginx.x86_64 : A high performance web server and reverse proxy server ================================================== Name &amp;#38; Summary Matched: nginx =================================================== nginx-mod-mail.x86_64 : Nginx mail modules nginx-mod-stream.x86_64 : Nginx stream modules nginx-mod-http-perl.x86_64 : Nginx HTTP perl module nginx-mod-http-xslt-filter.x86_64 : Nginx XSLT module nginx-mod-http-image-filter.x86_64 : Nginx HTTP image filter module nginx-filesystem.noarch : The basic directory layout for the Nginx server nginx-all-modules.noarch : A meta package that installs all available Nginx modules&lt;/pre&gt; &lt;p&gt;Finally, leave the test container, stop, and remove it:&lt;/p&gt; &lt;pre&gt;[root@de1d73d88418 /]# exit $ docker stop test test $ docker rm test test&lt;/pre&gt; &lt;p&gt;As you can see, running UBIs using Docker just works. But what about building container images based on Universal Base Images?&lt;/p&gt; &lt;h1&gt;A sample Dockerfile for a PHP application&lt;/h1&gt; &lt;p&gt;The following listing shows a sample Dockerfile for a PHP application:&lt;/p&gt; &lt;pre&gt;FROM registry.access.redhat.com/ubi8/ubi:8.1 RUN yum --disableplugin=subscription-manager -y module enable php:7.3 \   &amp;#38;&amp;#38; yum --disableplugin=subscription-manager -y install httpd php \   &amp;#38;&amp;#38; yum --disableplugin=subscription-manager clean all ADD index.php /var/www/html RUN sed -i 's/Listen 80/Listen 8080/' /etc/httpd/conf/httpd.conf \   &amp;#38;&amp;#38; mkdir /run/php-fpm \   &amp;#38;&amp;#38; chgrp -R 0 /var/log/httpd /var/run/httpd /run/php-fpm \   &amp;#38;&amp;#38; chmod -R g=u /var/log/httpd /var/run/httpd /run/php-fpm EXPOSE 8080 USER 1001 CMD php-fpm &amp;#38; httpd -D FOREGROUND&lt;/pre&gt; &lt;p&gt;The second &lt;code&gt;RUN&lt;/code&gt; instruction allows the image to run unchanged under OpenShift’s default security policies. Otherwise, that image would require running as the root user, something that regular OpenShift users cannot do.&lt;/p&gt; &lt;p&gt;You also need a &amp;#8220;hello, world&amp;#8221;-style PHP page for the &lt;code&gt;index.php&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&amp;#60;html&amp;#62; &amp;#60;body&amp;#62; &amp;#60;?php print "Hello, world!\n" ?&amp;#62; &amp;#60;/body&amp;#62; &amp;#60;/html&amp;#62;&lt;/pre&gt; &lt;p&gt;Now build the sample image:&lt;/p&gt; &lt;pre&gt;$  docker build -t php-hello . Sending build context to docker daemon  3.584kB Step 1/7 : FROM registry.access.redhat.com/ubi8/ubi:8.1  ---&amp;#62; fd73e6738a95 ... Successfully tagged php-hello:latest&lt;/pre&gt; &lt;p&gt;And start a container from the sample image:&lt;/p&gt; &lt;pre&gt;$ docker run --name hello -p 8080:8080 -d php-hello&lt;/pre&gt; &lt;p&gt;Finally, open a web browser and access &lt;code&gt;localhost:8080&lt;/code&gt; to see the &lt;code&gt;Hello, world!&lt;/code&gt; message returned by your sample container. When you are happy with the results, stop and delete the sample container:&lt;/p&gt; &lt;pre&gt;$ docker stop hello hello $ docker rm hello hello&lt;/pre&gt; &lt;p&gt;As you see, there is nothing unusual about using Universal Base Images with Docker. They just work.&lt;/p&gt; &lt;h1&gt;Learning more about UBIs&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/articles/4238681" target="_blank" rel="noopener noreferrer"&gt;Universal Base Images (UBI): Images, repositories, and packages&lt;/a&gt; from the Red Hat Customer Portal.&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/products/rhel/ubi/" target="_blank" rel="noopener noreferrer"&gt;Red Hat Universal Base Images (UBI)&lt;/a&gt; at Red Hat Developer, which also provides the &lt;a href="https://developers.redhat.com/articles/ubi-faq/" target="_blank" rel="noopener noreferrer"&gt;UBI FAQ&lt;/a&gt; among other resources.&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.redhat.com/en/blog/using-red-hat-universal-base-image-azure-pipelines-and-red-hat-quayio" target="_blank" rel="noopener noreferrer"&gt;Using Red Hat Universal Base Image with Azure Pipelines and Red Hat Quay.io&lt;/a&gt; from the Red Hat blog, which is a great example of using UBIs with non-Red Hat tools.&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2020/02/26/red-hat-simplifies-container-dev-and-redistribution-rhel-packages/" target="_blank" rel="noopener noreferrer"&gt;How Red Hat partners can now freely redistribute more RHEL packages&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F24%2Fred-hat-universal-base-images-for-docker-users%2F&amp;#38;linkname=Red%20Hat%20Universal%20Base%20Images%20for%20Docker%20users" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F24%2Fred-hat-universal-base-images-for-docker-users%2F&amp;#38;linkname=Red%20Hat%20Universal%20Base%20Images%20for%20Docker%20users" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F24%2Fred-hat-universal-base-images-for-docker-users%2F&amp;#38;linkname=Red%20Hat%20Universal%20Base%20Images%20for%20Docker%20users" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F24%2Fred-hat-universal-base-images-for-docker-users%2F&amp;#38;linkname=Red%20Hat%20Universal%20Base%20Images%20for%20Docker%20users" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F24%2Fred-hat-universal-base-images-for-docker-users%2F&amp;#38;linkname=Red%20Hat%20Universal%20Base%20Images%20for%20Docker%20users" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F24%2Fred-hat-universal-base-images-for-docker-users%2F&amp;#38;linkname=Red%20Hat%20Universal%20Base%20Images%20for%20Docker%20users" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F24%2Fred-hat-universal-base-images-for-docker-users%2F&amp;#38;linkname=Red%20Hat%20Universal%20Base%20Images%20for%20Docker%20users" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F24%2Fred-hat-universal-base-images-for-docker-users%2F&amp;#038;title=Red%20Hat%20Universal%20Base%20Images%20for%20Docker%20users" data-a2a-url="https://developers.redhat.com/blog/2020/03/24/red-hat-universal-base-images-for-docker-users/" data-a2a-title="Red Hat Universal Base Images for Docker users"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/24/red-hat-universal-base-images-for-docker-users/"&gt;Red Hat Universal Base Images for Docker users&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/-48C1znKQYM" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Red Hat Universal Base Images (UBIs) allow developers using Docker on Windows and Mac platforms to tap into the benefits of the large Red Hat ecosystem. This article demonstrates how to use Red Hat Universal Base Images with Docker from a non-Red Hat system, such as a Windows or Mac workstation. Red Hat Enterprise Linux [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/24/red-hat-universal-base-images-for-docker-users/"&gt;Red Hat Universal Base Images for Docker users&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">691797</post-id><dc:creator>Fernando Lozano</dc:creator><dc:date>2020-03-24T07:00:01Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/03/24/red-hat-universal-base-images-for-docker-users/</feedburner:origLink></entry><entry><title>Keycloak 9.0.2 released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/OqLlHKftomQ/keycloak-902-released.html" /><category term="feed_group_name_keycloak" scheme="searchisko:content:tags" /><category term="feed_name_keycloak" scheme="searchisko:content:tags" /><category term="Keycloak Release" scheme="searchisko:content:tags" /><author><name>Keycloak</name></author><id>searchisko:content:id:jbossorg_blog-keycloak_9_0_2_released</id><updated>2020-03-24T00:00:00Z</updated><published>2020-03-24T00:00:00Z</published><content type="html">&lt;p&gt;To download the release go to &lt;a href="https://www.keycloak.org//downloads.html"&gt;Keycloak downloads&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;All resolved issues&lt;/h2&gt; &lt;p&gt;The full list of resolved issues are available in &lt;a href="https://issues.jboss.org/issues/?jql=project%20%3D%20keycloak%20and%20fixVersion%20%3D%209.0.2"&gt;JIRA&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Upgrading&lt;/h2&gt; &lt;p&gt;Before you upgrade remember to backup your database and check the &lt;a href="https://www.keycloak.org//docs/latest/upgrading/index.html"&gt;upgrade guide&lt;/a&gt; for anything that may have changed.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/OqLlHKftomQ" height="1" width="1" alt=""/&gt;</content><summary>To download the release go to Keycloak downloads. All resolved issues The full list of resolved issues are available in JIRA Upgrading Before you upgrade remember to backup your database and check the upgrade guide for anything that may have changed.</summary><dc:creator>Keycloak</dc:creator><dc:date>2020-03-24T00:00:00Z</dc:date><feedburner:origLink>https://www.keycloak.org//2020/03/keycloak-902-released.html</feedburner:origLink></entry><entry><title>Ceph storage monitoring with Zabbix</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/1GfBUM2HVz0/" /><category term="DevOps" /><category term="Linux" /><category term="Performance" /><category term="ceph" /><category term="continuous monitoring" /><category term="storage" /><category term="template" /><category term="zabbix" /><author><name>Alessandro Silva</name></author><id>https://developers.redhat.com/blog/?p=684817</id><updated>2020-03-23T07:00:22Z</updated><published>2020-03-23T07:00:22Z</published><content type="html">&lt;p&gt;Storage prices are decreasing, while business demands are growing, and companies are storing more data than ever before. Following this growth pattern, demand grows for monitoring and data protection involving software-defined storage. Downtimes have a high cost that can directly impact business continuity and cause irreversible damage to organizations. Aftereffects include loss of assets and information; interruption of services and operations; law, regulation, or contract violations; along with the financial impacts from losing customers and damaging a company&amp;#8217;s reputation.&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&lt;em&gt;&lt;a href="https://blogs.gartner.com/andrew-lerner/2014/07/16/the-cost-of-downtime/"&gt;Gartner&lt;/a&gt; estimates that a minute of downtime costs enterprise organizations $5,600, and an hour costs over $300,000.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;On the other hand, in a DevOps context, it&amp;#8217;s essential to think about &lt;em&gt;continuous monitoring&lt;/em&gt;, which is a proactive approach to monitoring throughout the full application&amp;#8217;s life cycle and that of its components. This approach helps identify the root cause of possible problems and then quickly and proactively prevent performance issues or future outages. In this article, you will learn how to implement &lt;a href="https://ceph.io/ceph-storage/" target="_blank" rel="noopener noreferrer"&gt;Ceph&lt;/a&gt; storage monitoring using the enterprise open source tool Zabbix.&lt;/p&gt; &lt;p&gt;&lt;span id="more-684817"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;b&gt;What is Ceph storage?&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;Ceph storage is an open source &lt;em&gt;software-defined storage&lt;/em&gt; system with petabyte-scale and distributed storage, designed mainly for cloud workloads. While traditional NAS or SAN storage solutions are often based on expensive proprietary hardware solutions, software-defined storage is usually designed to run on commodity hardware, which makes these systems less expensive than traditional storage appliances.&lt;/p&gt; &lt;p&gt;Ceph storage is designed primarily for the following use cases:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Image and virtual block device storage for an OpenStack environment (using Glance, Cinder, and Nova).&lt;/li&gt; &lt;li&gt;Object-based storage access for applications that use standard APIs.&lt;/li&gt; &lt;li&gt;Persistent storage for containers.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;According to the Ceph documentation, whether you want to provide object storage or block device services to cloud platforms, deploy a filesystem, or use Ceph for another purpose, all storage cluster deployments begin with setting up a node, your network, and the storage cluster. A Ceph storage cluster requires at least one monitor (&lt;code&gt;ceph-mon&lt;/code&gt;), one manager (&lt;code&gt;ceph-mgr&lt;/code&gt;), and an object storage daemon (&lt;code&gt;ceph-osd&lt;/code&gt;). The metadata server (&lt;code&gt;ceph-mds&lt;/code&gt;) is also required when running Ceph File System (CephFS) clients. These are some of the many components that will be monitored by Zabbix. To learn more about what each component does, read the &lt;a href="https://docs.ceph.com/docs/master/start/intro/" target="_blank" rel="noopener noreferrer"&gt;product documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Here we are proposing a lab, but if you are planning to do this in production, you should review hardware and the operating system recommendations first.&lt;/p&gt; &lt;h2&gt;&lt;b&gt;What is Zabbix and how can it help?&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;Zabbix is an enterprise-class open source distributed monitoring system. It monitors numerous network parameters and the health and integrity of servers. Zabbix uses a flexible notification mechanism that lets users configure email-based alerts for virtually any event, which provides a fast reaction to server problems. This tool also offers excellent reporting and data visualization features based on the stored data and so is ideal for capacity planning.&lt;/p&gt; &lt;p&gt;It supports both polling and trapping. All reports and statistics, as well as configuration parameters, are accessed through a web-based frontend. This front end ensures that the status of your network and the health of your servers can be assessed from any location. Properly configured, Zabbix can play an important role in monitoring IT infrastructure. This fact is equally true for small organizations with a few servers and for large companies with a multitude of servers. I won&amp;#8217;t cover Zabbix installation here, but there is a great &lt;a href="https://www.zabbix.com/download" target="_blank" rel="noopener noreferrer"&gt;guide&lt;/a&gt; and a &lt;a href="https://youtu.be/yYmkFf3AEBo" target="_blank" rel="noopener noreferrer"&gt;video&lt;/a&gt; in the official documentation.&lt;/p&gt; &lt;h2&gt;&lt;b&gt;The Ceph Manager daemon&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;Added in Ceph 11.x (also known as &lt;em&gt;Kraken&lt;/em&gt;) and &lt;a href="https://www.redhat.com/en/technologies/storage/ceph" target="_blank" rel="noopener noreferrer"&gt;Red Hat Ceph Storage&lt;/a&gt; version 3 (also known as &lt;i&gt;Luminous&lt;/i&gt;), the Ceph Manager daemon (&lt;code&gt;ceph-mgr&lt;/code&gt;) is required for normal operations, runs alongside monitor daemons to provide additional monitoring, and interfaces to external monitoring and management systems. At the same time, you can create modules and extend managers to provide new features. Here, we will use this ability through a Zabbix Python module that is responsible for exporting overall cluster status and performance to Zabbix server, which is the central process that performs monitoring, interacts with Zabbix proxies and agents, calculates triggers, and sends notifications—a central data repository. Obviously, you can still collect traditional metrics about your operational systems, but the Zabbix Python module will gather specific information about storage metrics and performance and send it to the Zabbix server.&lt;/p&gt; &lt;p&gt;Here are some examples of available metrics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Ceph performance, such as I/O operations, bandwidth, and latency.&lt;/li&gt; &lt;li&gt;Storage utilization and overview.&lt;/li&gt; &lt;li&gt;Object storage daemon (OSD) status and how many are in or up.&lt;/li&gt; &lt;li&gt;Number of monitors (mons) and OSDs.&lt;/li&gt; &lt;li&gt;Number of pools and placement groups.&lt;/li&gt; &lt;li&gt;Overall Ceph status.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;&lt;b&gt;The lab environment&lt;br /&gt; &lt;/b&gt;&lt;/h2&gt; &lt;p&gt;Ceph cluster installation will not be covered here, but you can find more information about how to do that in the &lt;a href="https://docs.ceph.com/docs/master/" target="_blank" rel="noopener noreferrer"&gt;Ceph documentation&lt;/a&gt;. My storage cluster was installed using &lt;a href="https://github.com/ceph/ceph-ansible" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;ceph-ansible&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The computing resources used were 12 instances with the same configuration, including two CPU cores, 4GB of RAM, and:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Three monitor nodes and three manager nodes (colocated).&lt;/li&gt; &lt;li&gt;Three OSD nodes with three disks per node (nine OSDs in total).&lt;/li&gt; &lt;li&gt;Two metadata server (MDS) nodes.&lt;/li&gt; &lt;li&gt;Two RADOS Gateway nodes.&lt;/li&gt; &lt;li&gt;One Ansible management node.&lt;/li&gt; &lt;li&gt;One Zabbix server node colocated (Zabbix server, MariaDB server, and Zabbix front end).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;See Figure 1 for the resulting cluster&amp;#8217;s topology.&lt;/p&gt; &lt;div id="attachment_697957" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-697957" class=" size-large wp-image-697957 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Cephlaptopology-1024x726.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Cephlaptopology-1024x726.png" alt="Figure showing the topology for the lab's Ceph cluster." width="640" height="454" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/03/Cephlaptopology-1024x726.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Cephlaptopology-300x213.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Cephlaptopology-768x544.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/03/Cephlaptopology.png 1026w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-697957" class="wp-caption-text"&gt;Figure 1: The Lab&amp;#8217;s cluster topology.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The software resources this lab used are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;The &lt;em&gt;base&lt;/em&gt; OS for all instances:&lt;/strong&gt; Red Hat Enterprise Linux 7.7&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Cluster storage nodes:&lt;/strong&gt; Red Hat Ceph Storage 4.0&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Management and automation:&lt;/strong&gt; Ansible 2.8&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Monitoring:&lt;/strong&gt; Zabbix 4.4&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Considering that my cluster is installed and ready, here is the health, service, and task status:&lt;/p&gt; &lt;pre&gt;[user@mons-0 ~]$ sudo ceph -s   cluster:     id:     7f528221-4110-40d7-84ff-5fbf939dd451     health: HEALTH_OK   services:     mon: 3 daemons, quorum mons-1,mons-2,mons-0 (age 37m)     mgr: mons-0(active, since 3d), standbys: mons-1, mons-2     mds: cephfs:1 {0=mdss-0=up:active} 1 up:standby     osd: 9 osds: 9 up (since 35m), 9 in (since 3d)     rgw: 2 daemons active (rgws-0.rgw0, rgws-1.rgw0)   task status:   data:     pools:   8 pools, 312 pgs     objects: 248 objects, 6.1 KiB     usage:   9.1 GiB used, 252 GiB / 261 GiB avail     pgs:     312 active+clean &lt;/pre&gt; &lt;h3&gt;&lt;b&gt;How to enable the Zabbix dashboard module&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;The Zabbix module is included in the &lt;code&gt;ceph-mgr&lt;/code&gt; package and you must deploy your Ceph cluster with a manager service enabled. To enable the Zabbix module with a single command in one of the &lt;code&gt;ceph-mgr&lt;/code&gt; nodes, use this:&lt;/p&gt; &lt;pre&gt;[user@mons-0 ~]$ sudo ceph mgr module enable zabbix&lt;/pre&gt; &lt;p&gt;You can check if the Zabbix module is enabled through the following command:&lt;/p&gt; &lt;pre&gt;[user@mons-0 ~]$ sudo ceph mgr module ls | head -5 { "enabled_modules": [ "dashboard", "prometheus", "zabbix" &lt;/pre&gt; &lt;h3&gt;&lt;b&gt;Sending data from the Ceph cluster to Zabbix&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;This solution uses the Zabbix sender utility, which is a command-line tool that can send performance data to Zabbix server for processing purposes. The utility is often used in long-running user scripts for periodically sending availability and performance data. It can be installed on most distributions using the package manager. You should install the &lt;code&gt;zabbix_sender&lt;/code&gt; executable on &lt;i&gt;all&lt;/i&gt; machines running &lt;code&gt;ceph-mgr&lt;/code&gt; for high availability&lt;i&gt;.&lt;/i&gt;&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s enable Zabbix repositories and install &lt;code&gt;zabbix_sender&lt;/code&gt; in all Ceph Manager nodes:&lt;/p&gt; &lt;pre&gt;[user@mons-0 ~]$ sudo rpm -Uvh https://repo.zabbix.com/zabbix/4.4/rhel/7/x86_64/zabbix-release-4.4-1.el7.noarch.rpm [user@mons-0 ~]$ sudo yum clean all [user@mons-0 ~]$ sudo yum install zabbix-sender -y&lt;/pre&gt; &lt;p&gt;Alternatively, you can automate this installation. Instead of running three commands on three different nodes, use Ansible to run them together as a single command in each of the three manager nodes:&lt;/p&gt; &lt;pre&gt;[user@mgmt ~]$ ansible mgrs -m command -a "sudo rpm -Uvh &lt;a href="https://repo.zabbix.com/zabbix/4.4/rhel/7/x86_64/zabbix-release-4.4-1.el7.noarch.rpm"&gt;https://repo.zabbix.com/zabbix/4.4/rhel/7/x86_64/zabbix-release-4.4-1.el7.noarch.rpm&lt;/a&gt;" [user@mgmt ~]$ ansible mgrs -m command -a "sudo yum clean all" [user@mgmt ~]$ ansible mgrs -m command -a "sudo yum install zabbix-sender -y" &lt;/pre&gt; &lt;h3&gt;&lt;b&gt;Configuring the module&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;After understanding how everything works, you just need a piece of configuration to make this module work accurately. The two required &lt;em&gt;items&lt;/em&gt; are &lt;code&gt;zabbix_host&lt;/code&gt; and the identifier (an item is &lt;i&gt;a particular piece of data that you want to receive from a host&lt;/i&gt;, a metric of data). The &lt;code&gt;zabbix_host&lt;/code&gt; setting points to the Zabbix server&amp;#8217;s host name or IP address, to which &lt;code&gt;zabbix_sender&lt;/code&gt; will send the items as a trap, while &lt;code&gt;identifier&lt;/code&gt; is a Ceph cluster identifier parameter in Zabbix. This parameter controls the identifier/host name to use as the source when sending items to Zabbix. This setting should match the name of the host in your Zabbix server.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you don&amp;#8217;t configure the &lt;code&gt;identifier&lt;/code&gt; parameter, the &lt;code&gt;ceph-&amp;#60;fsid&amp;#62;&lt;/code&gt; of the cluster will be used when sending data to Zabbix. The result would be, for example, &lt;code&gt;ceph-c6d33a98-8e90-790f-bd3a-1d22d8a7d354&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Optionally, you have many other configuration keys that can be configured. Here are a few with their default values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;&lt;code&gt;zabbix_port&lt;/code&gt;:&lt;/b&gt; TCP port where Zabbix server runs (default: 10051).&lt;/li&gt; &lt;li&gt;&lt;b&gt;&lt;code&gt;zabbix_sender&lt;/code&gt;:&lt;/b&gt; Path for the Zabbix sender binary (default:/usr/bin/zabbix_sender).&lt;/li&gt; &lt;li&gt;&lt;b&gt;&lt;code&gt;interval&lt;/code&gt;:&lt;/b&gt; Update interval for the specified time period during which &lt;code&gt;zabbix_sender&lt;/code&gt; sends the data for Zabbix server (default: 60 seconds).&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;&lt;b&gt;Configuring your keys&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;Configuration keys can be set on any server with the proper CephX credentials. These are usually monitors, where the &lt;code&gt;client.admin&lt;/code&gt; key is available:&lt;/p&gt; &lt;pre&gt;[user@mons-0 ~]$ sudo ceph zabbix config-set zabbix_host zabbix.lab.example [user@mons-0 ~]$ sudo ceph zabbix config-set identifier ceph4-cluster-example [user@mons-0 ~]$ sudo ceph zabbix config-set interval 120&lt;/pre&gt; &lt;p&gt;The module&amp;#8217;s current configuration can also be shown through the following command:&lt;/p&gt; &lt;pre&gt;[user@mons-0 ~]$ sudo ceph zabbix config-show  {"zabbix_port": 10051, "zabbix_host": "zabbix.lab.example", "identifier": "ceph4-cluster-example", "zabbix_sender": "/usr/bin/zabbix_sender", "interval": 120} &lt;/pre&gt; &lt;h2&gt;&lt;b&gt;Exploring Zabbix: Templates, host creation, and dashboards&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;It&amp;#8217;s time to import your template. In the Zabbix world, a template is a set of entities that can be conveniently applied to multiple hosts. These entities might be items, triggers, graphs, discovery rules, etc. Your base will be the items. When a template is linked to a host, all entities in the template are added to the host. Templates are assigned to each individual host directly.&lt;/p&gt; &lt;p&gt;Take a moment to download the &lt;a href="https://github.com/ceph/ceph/blob/master/src/pybind/mgr/zabbix/zabbix_template.xml" target="_blank" rel="noopener noreferrer"&gt;Zabbix template&lt;/a&gt; for Ceph, which is available in the source directory as an XML file:&lt;/p&gt; &lt;pre&gt;[user@mylaptop ~]$ curl https://raw.githubusercontent.com/ceph/ceph/master/src/pybind/mgr/zabbix/zabbix_template.xml -o zabbix_template.xml&lt;/pre&gt; &lt;p&gt;It&amp;#8217;s important to download this template file locally in raw mode or you will have problems importing in the next step. Then, to import the template into Zabbix (as shown in Figure 2), do the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Go to &lt;strong&gt;Configuration → Templates&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Click on &lt;strong&gt;Import&lt;/strong&gt; to the right.&lt;/li&gt; &lt;li&gt;Select the import file.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;Import&lt;/strong&gt; button.&lt;/li&gt; &lt;li&gt;Click &lt;strong&gt;Import&lt;/strong&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_686607" style="width: 646px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686607" class=" size-large wp-image-686607 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e4c6ee06eccb.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e4c6ee06eccb.png" alt="The Zabbix Import screen." width="636" height="495" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e4c6ee06eccb.png 867w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e4c6ee06eccb-300x234.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e4c6ee06eccb-768x598.png 768w" sizes="(max-width: 636px) 100vw, 636px" /&gt;&lt;p id="caption-attachment-686607" class="wp-caption-text"&gt;Figure 2: Importing a Zabbix template.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Afterward, an import success or failure message will be displayed in the front end. Once you import the template successfully, configure a host in the Zabbix front end and link to the newly created template (as shown in Figure 3) by doing the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Go to &lt;strong&gt;Configuration → Hosts&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Click on the &lt;strong&gt;Create host&lt;/strong&gt; button to the right.&lt;/li&gt; &lt;li&gt;Enter the host name and the group(s).&lt;/li&gt; &lt;li&gt;Link the Ceph template.&lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_686687" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686687" class=" size-large wp-image-686687 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e4c72f702c09-1024x757.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e4c72f702c09-1024x757.png" alt="The Zabbix Hosts screen open to the Host tab." width="640" height="473" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e4c72f702c09-1024x757.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e4c72f702c09-300x222.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e4c72f702c09-768x568.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e4c72f702c09.png 1120w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-686687" class="wp-caption-text"&gt;Figure 3: Creating your Ceph cluster host and adding it to a group.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;&lt;strong&gt;Host name&lt;/strong&gt; and &lt;strong&gt;Groups&lt;/strong&gt; are required fields. Make sure that the host has the same name as the identifier configured in the Ceph &lt;code&gt;config-key&lt;/code&gt; parameter. There are many groups available, and you can either choose one or create a new one. For the purpose of this lab, choose &lt;b&gt;Linux servers&lt;/b&gt;.&lt;/p&gt; &lt;p&gt;In the &lt;strong&gt;Templates&lt;/strong&gt; tab (as shown in Figure 4), choose the &lt;b&gt;ceph-mgr Zabbix module&lt;/b&gt; that you imported before, and click &lt;strong&gt;Select&lt;/strong&gt;. When that dialog box closes, click &lt;b&gt;Add&lt;/b&gt;.&lt;/p&gt; &lt;div id="attachment_686637" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e4c70970652c.png"&gt;&lt;img aria-describedby="caption-attachment-686637" class=" size-large wp-image-686637 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e4c70970652c-1024x304.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e4c70970652c-1024x304.png" alt="Zabbits open to Hosts -&amp;#62; Templates." width="640" height="190" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e4c70970652c-1024x304.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e4c70970652c-300x89.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e4c70970652c-768x228.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e4c70970652c.png 1305w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-686637" class="wp-caption-text"&gt;Figure 4: Linking the Ceph template to the host.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Now your configuration is complete. After a few minutes, data should start to appear in the Zabbix web interface under the &lt;strong&gt;Monitoring -&amp;#62; Latest Data&lt;/strong&gt; menu, and graphs will start to populate for the host. Many triggers are already configured in the template, which will send out notifications if you configure your actions and operations.&lt;/p&gt; &lt;p&gt;&lt;span class="tlid-translation translation" lang="en"&gt;&lt;span class="" title=""&gt;After the data is collected&lt;/span&gt;&lt;/span&gt;, you can easily create Ceph dashboards and have fun with Zabbix, as shown in Figure 5:&lt;/p&gt; &lt;div id="attachment_690177" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e5803a8cd966.png"&gt;&lt;img aria-describedby="caption-attachment-690177" class=" size-large wp-image-690177 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e5803a8cd966-1024x496.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e5803a8cd966-1024x496.png" alt="The Ceph dashboard with Zabbix data displayed." width="640" height="310" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e5803a8cd966-1024x496.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e5803a8cd966-300x145.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/img_5e5803a8cd966-768x372.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-690177" class="wp-caption-text"&gt;Figure 5: An example Zabbix Ceph dashboard.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, you learned how to build a monitoring system for Ceph storage using Zabbix. This system improves your visibility into your storage system&amp;#8217;s health, which helps you proactively identify possible failed events and performance issues before they impact your applications and even your business&amp;#8217;s continuity.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F23%2Fceph-storage-monitoring-with-zabbix%2F&amp;#38;linkname=Ceph%20storage%20monitoring%20with%20Zabbix" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F23%2Fceph-storage-monitoring-with-zabbix%2F&amp;#38;linkname=Ceph%20storage%20monitoring%20with%20Zabbix" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F23%2Fceph-storage-monitoring-with-zabbix%2F&amp;#38;linkname=Ceph%20storage%20monitoring%20with%20Zabbix" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F23%2Fceph-storage-monitoring-with-zabbix%2F&amp;#38;linkname=Ceph%20storage%20monitoring%20with%20Zabbix" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F23%2Fceph-storage-monitoring-with-zabbix%2F&amp;#38;linkname=Ceph%20storage%20monitoring%20with%20Zabbix" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F23%2Fceph-storage-monitoring-with-zabbix%2F&amp;#38;linkname=Ceph%20storage%20monitoring%20with%20Zabbix" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F23%2Fceph-storage-monitoring-with-zabbix%2F&amp;#38;linkname=Ceph%20storage%20monitoring%20with%20Zabbix" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F03%2F23%2Fceph-storage-monitoring-with-zabbix%2F&amp;#038;title=Ceph%20storage%20monitoring%20with%20Zabbix" data-a2a-url="https://developers.redhat.com/blog/2020/03/23/ceph-storage-monitoring-with-zabbix/" data-a2a-title="Ceph storage monitoring with Zabbix"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/23/ceph-storage-monitoring-with-zabbix/"&gt;Ceph storage monitoring with Zabbix&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/1GfBUM2HVz0" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Storage prices are decreasing, while business demands are growing, and companies are storing more data than ever before. Following this growth pattern, demand grows for monitoring and data protection involving software-defined storage. Downtimes have a high cost that can directly impact business continuity and cause irreversible damage to organizations. Aftereffects include loss of assets and [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/03/23/ceph-storage-monitoring-with-zabbix/"&gt;Ceph storage monitoring with Zabbix&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">684817</post-id><dc:creator>Alessandro Silva</dc:creator><dc:date>2020-03-23T07:00:22Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/03/23/ceph-storage-monitoring-with-zabbix/</feedburner:origLink></entry><entry><title>Apache Camel 3.1 - Fast loading of XML routes</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/tjRctVYmjyc/apache-camel-31-fast-loading-of-xml.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><category term="roadmap" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-apache_camel_3_1_fast_loading_of_xml_routes</id><updated>2020-03-22T17:45:42Z</updated><published>2020-03-22T17:45:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;A feature that was added to Camel 3.1 is the ability to load XML routes much faster. This is part of the overall work we are doing on making Camel much smaller and faster.&lt;br /&gt;&lt;br /&gt;You may say ewww XML. But frankly there are many users of Camel that have built applications with XML for defining routes. In Camel 2.x then you would have to use Spring or OSGi Blueprint for XML routes which both are becoming heavy in modern cloud native world.&lt;br /&gt;&lt;br /&gt;In Camel 3 we have a standalone mode for Camel called camel-main. We use camel-main as a common way to bootstrap and configure Camel for standalone, camel-k, camel-quarkus, and for most parts of camel-spring-boot as well. This ensures an unified and consistent developer experience across those runtimes.&lt;br /&gt;&lt;br /&gt;Okay this is probably a topic for another blog post to dive into camel-main as a great runtime for quickly running ... just Camel.&lt;br /&gt;&lt;br /&gt;So what I wanted to say in this blog post is that we have made it possible to loading XML routes much quicker and with a lot less overhead. In Camel 2.x, and for Spring XML and Blueprint XML they rely on JAXP and JAXB which ... are heavy.&lt;br /&gt;&lt;br /&gt;So what we have done for Camel 3.1 is to source code generate a XML parser based on the Camel DSL. This means anything we do changes to the DSL then the parser is re-generated. The parser just uses standard Java so there are no additional 3rd party library dependencies.&lt;br /&gt;&lt;br /&gt;For loading XML routes in Camel we now have 2 parsers in the following JARs&lt;br /&gt;&lt;br /&gt;- &lt;b&gt;camel-xml-jaxb&lt;/b&gt;&amp;nbsp; &amp;nbsp;(traditional JAXB based as in Camel 2.x)&lt;br /&gt;- &lt;b&gt;camel-xml-io&amp;nbsp;&lt;/b&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;(new fast and lightweight source code generated parsers)&lt;br /&gt;&lt;br /&gt;The example &lt;a href="https://github.com/apache/camel-examples/tree/master/examples/camel-example-main-xml"&gt;camel-example-main-xml&lt;/a&gt; is setup to use the new parser. But you can try for yourself and switch to the jaxb parser by changing the JAR dependency.&lt;br /&gt;&lt;br /&gt;Lets see some numbers (note this is just a quick test on my laptop to run this example with the 2 XML parsers).&lt;br /&gt;&lt;br /&gt;camel-xml-jaxb: Loaded 1 (&lt;b&gt;808 millis&lt;/b&gt;) additional Camel XML routes from: routes/*.xml&lt;br /&gt;camel-xml-io:&amp;nbsp;Loaded 1 (&lt;b&gt;76 millis&lt;/b&gt;) additional Camel XML routes from: routes/*.xml&lt;br /&gt;&lt;br /&gt;So the new parser is about 10 times faster (76 vs 808 millis).&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-aBAzocQ7A-U/XnekHKgfSDI/AAAAAAAACHo/6npV4MOyjTIJxo-BuyNW8OaYG5tKK-TswCLcBGAsYHQ/s1600/xml-fast.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="170" data-original-width="486" height="138" src="https://1.bp.blogspot.com/-aBAzocQ7A-U/XnekHKgfSDI/AAAAAAAACHo/6npV4MOyjTIJxo-BuyNW8OaYG5tKK-TswCLcBGAsYHQ/s400/xml-fast.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;By profiling the JVM we can see that there is a lot less classes loaded as well: 4734 vs 3892. And on top of that JAXB leaves more objects and classes around in the JVM that may or may not easily be garbage collected, and would also be using more cpu and memory during its parsing.&lt;br /&gt;&lt;br /&gt;And then on GraalVM then the new parser would be much quicker as you can avoid having the entire JAXB and JAXP API and implementation on the classpath and for the GraalVM compiler to crunch and compile. And speaking of GraalVM then we are working on some great improvements in the upcoming Camel 3.2 that should help reduce the image size and compilation, and allow to do more dead code elimination and whatnot to make Camel even more awesome. That's yet another topic for another blog post, so stay tuned.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=DBQ6ctGj300:-6kO-JmoZkk:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=DBQ6ctGj300:-6kO-JmoZkk:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=DBQ6ctGj300:-6kO-JmoZkk:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=DBQ6ctGj300:-6kO-JmoZkk:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=DBQ6ctGj300:-6kO-JmoZkk:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=DBQ6ctGj300:-6kO-JmoZkk:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=DBQ6ctGj300:-6kO-JmoZkk:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/DBQ6ctGj300" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/tjRctVYmjyc" height="1" width="1" alt=""/&gt;</content><summary>A feature that was added to Camel 3.1 is the ability to load XML routes much faster. This is part of the overall work we are doing on making Camel much smaller and faster. You may say ewww XML. But frankly there are many users of Camel that have built applications with XML for defining routes. In Camel 2.x then you would have to use Spring or OSGi Blueprint for XML routes which both are becoming h...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2020-03-22T17:45:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/DBQ6ctGj300/apache-camel-31-fast-loading-of-xml.html</feedburner:origLink></entry><entry><title>Apache Camel 3.2 - Reflection free configuration of Camel</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/rxbCiQA0Qdw/apache-camel-32-reflection-free.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><category term="roadmap" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-apache_camel_3_2_reflection_free_configuration_of_camel</id><updated>2020-03-22T09:37:35Z</updated><published>2020-03-22T09:37:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;At the Apache Camel project we are working towards the next upcoming Apache Camel 3.2.0 release, which is planned for next month.&lt;br /&gt;&lt;br /&gt;One of the ares we have worked hard on in Camel 3 is to make it smaller and faster. And one aspect of this is also configuration management. You can fully configure Camel in many ways and according to the 12 factor principles, to keep configuration separated from the application. A popular way to configure is to use properties files (eg application.properties) or in Kubernetes you can configure from config maps or environment variables as well.&lt;br /&gt;&lt;br /&gt;So we have gradually over Camel 3.0, 3.1 and now 3.2 made configuration faster. With the latest work we are now fully reflection free.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-6jK6piCIdsY/Xncw02SZu-I/AAAAAAAACHc/9jnfMfzDUUErCgbsMtEQ8pI0Vq7DTrFWQCLcBGAsYHQ/s1600/fast-camel.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="334" data-original-width="600" height="222" src="https://1.bp.blogspot.com/-6jK6piCIdsY/Xncw02SZu-I/AAAAAAAACHc/9jnfMfzDUUErCgbsMtEQ8pI0Vq7DTrFWQCLcBGAsYHQ/s400/fast-camel.jpg" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Camel is capable of reporting when reflection based configuration are being used. Which can be configured with:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;# bean introspection to log reflection based configuration&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;camel.main.beanIntrospectionExtendedStatistics=true&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace;"&gt;camel.main.beanIntrospectionLoggingLevel=INFO&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;We have prepared the camel-example-main-tiny to report this. The numbers for Camel 3.0, 3.1, and 3.2 are as follows:&lt;br /&gt;&lt;br /&gt;&lt;i&gt;Camel 3.0: BeanIntrospection invoked: 12 times&lt;/i&gt;&lt;br /&gt;&lt;i&gt;Camel 3.1:&amp;nbsp;Stopping BeanIntrospection which was invoked: 11 times&lt;/i&gt;&lt;br /&gt;&lt;i&gt;Camel 3.2:&amp;nbsp;Stopping BeanIntrospection which was invoked: 0 times&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;What this means is that you can fully configure all your Camel endpoints, components, routes, EIPs, data formats, languages, camel main, camel context, and whatnot, in declarative properties files etc and then at runtime all of this ends up invoking the actual setter methods on all these instances (ie just direct java method calls, no java.lang.reflect).&lt;br /&gt;&lt;br /&gt;This is possible because we source code generate &lt;b&gt;configurer&lt;/b&gt; classes based on what options are present. And these configurer classes are reflection free. There can be many options so it would be impossible to implement this by hand, see for example the &lt;a href="https://github.com/apache/camel/blob/master/components/camel-kafka/src/generated/java/org/apache/camel/component/kafka/KafkaEndpointConfigurer.java"&gt;kafka endpoint configurer&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;And btw another feature coming in Camel 3.2 is that we made all of the components options available for configuration, before we didn't include nested configuration options. And if you do not like configuring in properties files, then we have type-safe component-dsl and &lt;a href="https://camel.apache.org/manual/latest/Endpoint-dsl.html"&gt;endpoint-dsl&lt;/a&gt; as well.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=poKG7A6PJ2c:UUNVv61DPq4:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=poKG7A6PJ2c:UUNVv61DPq4:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=poKG7A6PJ2c:UUNVv61DPq4:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=poKG7A6PJ2c:UUNVv61DPq4:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=poKG7A6PJ2c:UUNVv61DPq4:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=poKG7A6PJ2c:UUNVv61DPq4:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=poKG7A6PJ2c:UUNVv61DPq4:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/poKG7A6PJ2c" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/rxbCiQA0Qdw" height="1" width="1" alt=""/&gt;</content><summary>At the Apache Camel project we are working towards the next upcoming Apache Camel 3.2.0 release, which is planned for next month. One of the ares we have worked hard on in Camel 3 is to make it smaller and faster. And one aspect of this is also configuration management. You can fully configure Camel in many ways and according to the 12 factor principles, to keep configuration separated from the ap...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2020-03-22T09:37:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/poKG7A6PJ2c/apache-camel-32-reflection-free.html</feedburner:origLink></entry></feed>
